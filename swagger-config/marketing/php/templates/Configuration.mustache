<?php

{{>partial_header}}
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace {{invokerPackage}};
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#-first}}
use {{invokerPackage}}\Api\{{classname}};{{/-first}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

class Configuration
{
    private static $defaultConfiguration;

    protected $apiKeys = [];
    protected $apiKeyPrefixes = [];
    protected $accessToken = '';
    protected $username = '';
    protected $password = '';
    protected $host = '{{basePath}}';
    protected $userAgent = '{{#httpUserAgent}}{{{.}}}{{/httpUserAgent}}{{^httpUserAgent}}Swagger-Codegen/{{#artifactVersion}}{{{.}}}{{/artifactVersion}}{{^artifactVersion}}1.0.0{{/artifactVersion}}/php{{/httpUserAgent}}';
    protected $debug = false;
    protected $debugFile = 'php://output';
    protected $tempFolderPath;
    protected $timeout = 120;
    {{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#-first}}public ${{#tags}}{{{name}}}{{/tags}};
    {{/-first}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

    {{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#-first}}public ${{#tags}}{{{name}}}{{/tags}};
    {{/-first}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

    public function __construct()
    {
        $this->tempFolderPath = sys_get_temp_dir();

{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#-first}}        $this->{{#tags}}{{{name}}}{{/tags}} = new {{classname}}($this);
{{/-first}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}    }

    public function setConfig($config = array())
    {
        $apiKey = $config['apiKey'] ?? '';
        $accessToken = $config['accessToken'] ?? '';
        $server = $config['server'] ?? 'invalid-server';
        $host = str_replace('server', $server, $this->getHost());

        // Basic Authentication
        if (!empty($apiKey)) {
            $this->setUsername('user');
            $this->setPassword($apiKey);
        }

        // OAuth Authentication
        elseif (!empty($accessToken)) {
            $this->accessToken = $accessToken;
        }

        $this->setHost($host);

        if (isset($config['timeout'])) {
            $this->timeout = $config['timeout'];
        }

        return $this;
    }

    public function setApiKey($apiKeyIdentifier, $key)
    {
        $this->apiKeys[$apiKeyIdentifier] = $key;
        return $this;
    }

    public function getApiKey($apiKeyIdentifier)
    {
        return $this->apiKeys[$apiKeyIdentifier] ?? null;
    }

    public function setApiKeyPrefix($apiKeyIdentifier, $prefix)
    {
        $this->apiKeyPrefixes[$apiKeyIdentifier] = $prefix;
        return $this;
    }

    public function getApiKeyPrefix($apiKeyIdentifier)
    {
        return $this->apiKeyPrefixes[$apiKeyIdentifier] ?? null;
    }

    public function setAccessToken($accessToken)
    {
        $this->accessToken = $accessToken;
        return $this;
    }

    public function getAccessToken()
    {
        return $this->accessToken;
    }

    public function setUsername($username)
    {
        $this->username = $username;
        return $this;
    }

    public function getUsername()
    {
        return $this->username;
    }

    public function setPassword($password)
    {
        $this->password = $password;
        return $this;
    }

    public function getPassword()
    {
        return $this->password;
    }

    public function setHost($host)
    {
        $this->host = $host;
        return $this;
    }

    public function getHost()
    {
        return $this->host;
    }

    public function setUserAgent($userAgent)
    {
        if (!is_string($userAgent)) {
            throw new \InvalidArgumentException('User-agent must be a string.');
        }

        $this->userAgent = $userAgent;
        return $this;
    }

    public function getUserAgent()
    {
        return $this->userAgent;
    }

    public function setDebug($debug)
    {
        $this->debug = $debug;
        return $this;
    }

    public function getDebug()
    {
        return $this->debug;
    }

    public function setDebugFile($debugFile)
    {
        $this->debugFile = $debugFile;
        return $this;
    }

    public function getDebugFile()
    {
        return $this->debugFile;
    }

    public function setTempFolderPath($tempFolderPath)
    {
        $this->tempFolderPath = $tempFolderPath;
        return $this;
    }

    public function getTempFolderPath()
    {
        return $this->tempFolderPath;
    }

    public function setTimeout($timeout)
    {
        $this->timeout = $timeout;
    }

    public function getTimeout()
    {
        return $this->timeout;
    }

    public static function getDefaultConfiguration()
    {
        if (self::$defaultConfiguration === null) {
            self::$defaultConfiguration = new Configuration();
        }

        return self::$defaultConfiguration;
    }

    public static function setDefaultConfiguration(Configuration $config)
    {
        self::$defaultConfiguration = $config;
    }

    public static function toDebugReport()
    {
        $report  = 'PHP SDK ({{invokerPackage}}) Debug Report:' . PHP_EOL;
        $report .= '    OS: ' . php_uname() . PHP_EOL;
        $report .= '    PHP Version: ' . PHP_VERSION . PHP_EOL;
        $report .= '    OpenAPI Spec Version: {{version}}' . PHP_EOL;
	    {{#artifactVersion}}
        $report .= '    SDK Package Version: {{artifactVersion}}' . PHP_EOL;
    	{{/artifactVersion}}
        $report .= '    Temp Folder Path: ' . self::getDefaultConfiguration()->getTempFolderPath() . PHP_EOL;

        return $report;
    }

    public function getApiKeyWithPrefix($apiKeyIdentifier)
    {
        $apiKey = $this->getApiKey($apiKeyIdentifier);

        if ($apiKey === null) {
            return null;
        }

        $prefix = $this->getApiKeyPrefix($apiKeyIdentifier);

        return $prefix === null ? $apiKey : $prefix . ' ' . $apiKey;
    }
}
