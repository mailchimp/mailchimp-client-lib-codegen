<?php

{{>partial_header}}
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace {{invokerPackage}};

use GuzzleHttp\Client as RequestClient;
use GuzzleHttp\Psr7;
use GuzzleHttp\Exception\RequestException;
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#-first}}
use {{invokerPackage}}\Api\{{classname}};{{/-first}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

class Configuration
{
    protected $host = '{{basePath}}';
    protected $apiKey = '';
    protected $requestClient;
    protected $defaultOutputFormat = '';

    public static $formatList = ['json', 'xml', 'php', 'yaml'];

    public function __construct()
    {
        $this->requestClient = new RequestClient([
            'defaults' => [
                'timeout' => 300.0
            ]
        ]);

        // API Routes
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{#-first}}        $this->{{#tags}}{{{name}}}{{/tags}} = new {{classname}}($this);
{{/-first}}{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}    }

    public function setApiKey($apiKey = '')
    {
        $this->apiKey = $apiKey;
        return $this;
    }

    public function getApiKey()
    {
        return $this->apiKey;
    }

    public function getRequestClient()
    {
        return $this->requestClient;
    }

    public function getHost()
    {
        return $this->host;
    }

    public function setDefaultOutputFormat($outputFormat = '')
    {
        $this->defaultOutputFormat = $outputFormat;
        return $this;
    }

    public function getDefaultOutputFormat()
    {
        return $this->defaultOutputFormat;
    }

    //  HTTP POST request helper
    public function post($path, $body)
    {
        // Apply API key as body param
        $body['key'] = $this->getApiKey();

        // prepare request params
        $postUrl = $this->getHost() . $path;
        $postBody = [ 'json' => $body ];

        // set output format
        $defaultOutputFormat = $this->getDefaultOutputFormat();
        $useDefaultOutputFormat = true;

        if (array_key_exists('outputFormat', $body)) {
            $selectedFormat = strtolower($body['outputFormat']);

            if (in_array($selectedFormat, Configuration::$formatList)) {
                $postUrl = $postUrl . '.' . $selectedFormat;
                unset($body['outputFormat']);
                $useDefaultOutputFormat = false;
            }
        }

        if ($useDefaultOutputFormat && in_array($defaultOutputFormat, Configuration::$formatList)) {
            $postUrl = $postUrl . '.' . $defaultOutputFormat;
        }

        // send request
        try {
            $client = $this->getRequestClient();
            $response = $client->request('POST', $postUrl, $postBody);
            $resp = $response->getBody();
            $contentType = $response->getHeaderLine('content-type');

            if (strpos($contentType, 'application/json') !== false) {
                return json_decode($resp);
            }

            return $resp;
        } catch (RequestException $e) {
            return $e->hasResponse() ? Psr7\str($e->getResponse()) : $e;
        }
    }
}
