{
  "x-doc-structure": {
    "resources": {
      "allowlists": {
        "title": "Allowlists",
        "description": "Add, list, or delete from your Rejection Allowlist.",
        "paths": ["/allowlists/add", "/allowlists/list", "/allowlists/delete"]
      },
      "exports": {
        "title": "Exports",
        "description": "Start an export, or get information on export jobs in progress.",
        "paths": [
          "/exports/info",
          "/exports/list",
          "/exports/rejects",
          "/exports/whitelist",
          "/exports/allowlist",
          "/exports/activity"
        ]
      },
      "inbound": {
        "title": "Inbound",
        "description": "Manage your inbound domains and routes.",
        "paths": [
          "/inbound/domains",
          "/inbound/add-domain",
          "/inbound/check-domain",
          "/inbound/delete-domain",
          "/inbound/routes",
          "/inbound/add-route",
          "/inbound/update-route",
          "/inbound/delete-route",
          "/inbound/send-raw"
        ]
      },
      "ips": {
        "title": "IPs",
        "description": "Request and manage Dedicated IPs for your account, and set up reverse DNS.",
        "paths": [
          "/ips/list",
          "/ips/info",
          "/ips/provision",
          "/ips/start-warmup",
          "/ips/cancel-warmup",
          "/ips/set-pool",
          "/ips/delete",
          "/ips/list-pools",
          "/ips/pool-info",
          "/ips/create-pool",
          "/ips/delete-pool",
          "/ips/check-custom-dns",
          "/ips/set-custom-dns"
        ]
      },
      "messages": {
        "title": "Messages",
        "description": "Send, schedule, or get information on your emails.",
        "paths": [
          "/messages/send",
          "/messages/send-template",
          "/messages/search",
          "/messages/search-time-series",
          "/messages/info",
          "/messages/content",
          "/messages/parse",
          "/messages/send-raw",
          "/messages/list-scheduled",
          "/messages/cancel-scheduled",
          "/messages/reschedule"
        ]
      },
      "metadata": {
        "title": "Metadata",
        "description": "Manage your custom metadata fields in your account.",
        "paths": [
          "/metadata/list",
          "/metadata/add",
          "/metadata/update",
          "/metadata/delete"
        ]
      },
      "rejects": {
        "title": "Rejects",
        "description": "Add, list, or delete from your Rejection Denylist.",
        "paths": ["/rejects/add", "/rejects/list", "/rejects/delete"]
      },
      "senders": {
        "title": "Senders",
        "description": "Manage or get information about your sending domains.",
        "paths": [
          "/senders/list",
          "/senders/domains",
          "/senders/add-domain",
          "/senders/check-domain",
          "/senders/verify-domain",
          "/senders/info",
          "/senders/time-series"
        ]
      },
      "subaccounts": {
        "title": "Subaccounts",
        "description": "Manage your subaccounts, including the abilitiy to pause and resume sending.",
        "paths": [
          "/subaccounts/list",
          "/subaccounts/add",
          "/subaccounts/info",
          "/subaccounts/update",
          "/subaccounts/delete",
          "/subaccounts/pause",
          "/subaccounts/resume"
        ]
      },
      "tags": {
        "title": "Tags",
        "description": "List, delete, or get information on your Tags and their sending statistics.",
        "paths": [
          "/tags/list",
          "/tags/delete",
          "/tags/info",
          "/tags/time-series",
          "/tags/all-time-series"
        ]
      },
      "templates": {
        "title": "Templates",
        "description": "Manage the Templates in your account.",
        "paths": [
          "/templates/add",
          "/templates/info",
          "/templates/update",
          "/templates/publish",
          "/templates/delete",
          "/templates/list",
          "/templates/time-series",
          "/templates/render"
        ]
      },
      "urls": {
        "title": "URLs",
        "description": "Manage your tracking domains. Some of these endpoints may be deprecated.",
        "paths": [
          "/urls/list",
          "/urls/search",
          "/urls/time-series",
          "/urls/tracking-domains",
          "/urls/add-tracking-domain",
          "/urls/check-tracking-domain"
        ]
      },
      "users": {
        "title": "Users",
        "description": "Get information about your account, or ping Transactional.",
        "paths": [
          "/users/info",
          "/users/ping",
          "/users/ping2",
          "/users/senders"
        ]
      },
      "webhooks": {
        "title": "Webhooks",
        "description": "Manage the webhooks in your account.",
        "paths": [
          "/webhooks/list",
          "/webhooks/add",
          "/webhooks/info",
          "/webhooks/update",
          "/webhooks/delete"
        ]
      },
      "whitelists": {
        "title": "Whitelists",
        "description": "Add, list, or delete from your Rejection Allowlist. These endpoints are being replaced with a series of functionally identical endpoints called /allowlists.",
        "paths": ["/whitelists/add", "/whitelists/list", "/whitelists/delete"]
      }
    }
  },
  "swagger": "2.0",
  "info": {
    "version": "1.0.48",
    "title": "Mailchimp Transactional API",
    "contact": {
      "name": "API Support",
      "email": "apihelp@mailchimp.com"
    },
    "x-permalink": "https://github.com/mailchimp/mailchimp-client-lib-codegen/blob/main/spec/transactional.json"
  },
  "host": "mandrillapp.com",
  "basePath": "/api/1.0",
  "schemes": ["https"],
  "consumes": ["application/json"],
  "produces": [
    "application/json",
    "application/xml",
    "application/x-php",
    "application/x-yaml; charset=utf-8"
  ],
  "paths": {
    "/allowlists/add": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "add",
          "methodNameSnake": "add"
        },
        "summary": "Add email to allowlist",
        "description": "Adds an email to your email rejection allowlist. If the address is currently on your denylist, that denylist entry will be removed automatically.",
        "operationId": "postAllowlistsAdd",
        "tags": ["allowlists"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "email"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "email": {
                  "type": "string",
                  "description": "an email address to add to the allowlist",
                  "format": "email"
                },
                "comment": {
                  "type": "string",
                  "description": "an optional description of why the email was added to the allowlist",
                  "maxLength": 255
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "a status object containing the address and the result of the operation",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "the email address you provided"
                },
                "added": {
                  "type": "boolean",
                  "description": "whether the operation succeeded"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/allowlists/list": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "list",
          "methodNameSnake": "list"
        },
        "summary": "List allowlisted emails",
        "description": "Retrieves your email rejection allowlist. You can provide an email address or search prefix to limit the results. Returns up to 1000 results.",
        "operationId": "postAllowlistsList",
        "tags": ["allowlists"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "email": {
                  "type": "string",
                  "description": "an optional email address or prefix to search by",
                  "format": "email"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "up to 1000 allowlist entries",
              "items": {
                "type": "object",
                "description": "the information for each allowlist entry",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "the email that is allowlisted"
                  },
                  "detail": {
                    "type": "string",
                    "description": "a description of why the email was allowlisted"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "when the email was added to the allowlist"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/allowlists/delete": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "delete",
          "methodNameSnake": "delete"
        },
        "summary": "Remove email from allowlist",
        "description": "Removes an email address from the allowlist.",
        "operationId": "postAllowlistsDelete",
        "tags": ["allowlists"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "email"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "email": {
                  "type": "string",
                  "description": "the email address to remove from the allowlist",
                  "format": "email"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "a status object containing the address and whether the deletion succeeded",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "the email address that was removed from the denylist"
                },
                "deleted": {
                  "type": "boolean",
                  "description": "whether the address was deleted successfully"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/exports/info": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "info",
          "methodNameSnake": "info"
        },
        "summary": "View export info",
        "description": "Returns information about an export job. If the export job's state is 'complete', the returned data will include a URL you can use to fetch the results. Every export job produces a zip archive, but the format of the archive is distinct for each job type. The api calls that initiate exports include more details about the output format for that job type.",
        "operationId": "postExportsInfo",
        "tags": ["exports"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "id"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "id": {
                  "type": "string",
                  "description": "an export job identifier"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the information about the export",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "the unique identifier for this Export. Use this identifier when checking the export job's status"
                },
                "created_at": {
                  "type": "string",
                  "description": "the date and time that the export job was created as a UTC string in YYYY-MM-DD HH:MM:SS format",
                  "format": "date-time"
                },
                "type": {
                  "type": "string",
                  "description": "the type of the export job - activity, reject, or allowlist"
                },
                "finished_at": {
                  "type": "string",
                  "description": "the date and time that the export job was finished as a UTC string in YYYY-MM-DD HH:MM:SS format",
                  "format": "date-time"
                },
                "state": {
                  "type": "string",
                  "description": "the export job's state - waiting, working, complete, error, or expired."
                },
                "result_url": {
                  "type": "string",
                  "description": "the url for the export job's results, if the job is completed."
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/exports/list": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "list",
          "methodNameSnake": "list"
        },
        "summary": "List exports",
        "description": "Returns a list of your exports.",
        "operationId": "postExportsList",
        "tags": ["exports"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "the account's exports",
              "items": {
                "type": "object",
                "description": "the individual export info",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "the unique identifier for this Export. Use this identifier when checking the export job's status"
                  },
                  "created_at": {
                    "type": "string",
                    "description": "the date and time that the export job was created as a UTC string in YYYY-MM-DD HH:MM:SS format",
                    "format": "date-time"
                  },
                  "type": {
                    "type": "string",
                    "description": "the type of the export job - activity, reject, or allowlist"
                  },
                  "finished_at": {
                    "type": "string",
                    "description": "the date and time that the export job was finished as a UTC string in YYYY-MM-DD HH:MM:SS format",
                    "format": "date-time"
                  },
                  "state": {
                    "type": "string",
                    "description": "the export job's state - waiting, working, complete, error, or expired."
                  },
                  "result_url": {
                    "type": "string",
                    "description": "the url for the export job's results, if the job is completed."
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/exports/rejects": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "rejects",
          "methodNameSnake": "rejects"
        },
        "summary": "Export denylist",
        "description": "Begins an export of your rejection denylist. The denylist will be exported to a zip archive containing a single file named rejects.csv that includes the following fields: email, reason, detail, created_at, expires_at, last_event_at, expires_at.",
        "operationId": "postExportsRejects",
        "tags": ["exports"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "notify_email": {
                  "type": "string",
                  "description": "an optional email address to notify when the export job has finished.",
                  "format": "email"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "information about the rejects export job that was started",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "the unique identifier for this Export. Use this identifier when checking the export job's status"
                },
                "created_at": {
                  "type": "string",
                  "description": "the date and time that the export job was created as a UTC string in YYYY-MM-DD HH:MM:SS format",
                  "format": "date-time"
                },
                "type": {
                  "type": "string",
                  "description": "the type of the export job - activity, reject, or whitelist"
                },
                "finished_at": {
                  "type": "string",
                  "description": "the date and time that the export job was finished as a UTC string in YYYY-MM-DD HH:MM:SS format",
                  "format": "date-time"
                },
                "state": {
                  "type": "string",
                  "description": "the export job's state - waiting, working, complete, error, or expired."
                },
                "result_url": {
                  "type": "string",
                  "description": "the url for the export job's results, if the job is completed."
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/exports/whitelist": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "whitelist",
          "methodNameSnake": "whitelist"
        },
        "summary": "Export Allowlist",
        "description": "Begins an export of your rejection allowlist. The allowlist will be exported to a zip archive containing a single file named allowlist.csv that includes the following fields: email, detail, created_at.",
        "operationId": "postExportsWhitelist",
        "tags": ["exports"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "notify_email": {
                  "type": "string",
                  "description": "an optional email address to notify when the export job has finished.",
                  "format": "email"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "information about the allowlist export job that was started",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "the unique identifier for this Export. Use this identifier when checking the export job's status"
                },
                "created_at": {
                  "type": "string",
                  "description": "the date and time that the export job was created as a UTC string in YYYY-MM-DD HH:MM:SS format",
                  "format": "date-time"
                },
                "type": {
                  "type": "string",
                  "description": "the type of the export job"
                },
                "finished_at": {
                  "type": "string",
                  "description": "the date and time that the export job was finished as a UTC string in YYYY-MM-DD HH:MM:SS format, or null for jobs that have not run",
                  "format": "date-time"
                },
                "state": {
                  "type": "string",
                  "description": "the export job's state"
                },
                "result_url": {
                  "type": "string",
                  "description": "the url for the export job's results, if the job is complete"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/exports/allowlist": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "allowlist",
          "methodNameSnake": "allowlist"
        },
        "summary": "Export Allowlist",
        "description": "Begins an export of your rejection allowlist. The allowlist will be exported to a zip archive containing a single file named allowlist.csv that includes the following fields: email, detail, created_at.",
        "operationId": "postExportsAllowlist",
        "tags": ["exports"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "notify_email": {
                  "type": "string",
                  "description": "an optional email address to notify when the export job has finished.",
                  "format": "email"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "information about the allowlist export job that was started",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "the unique identifier for this Export. Use this identifier when checking the export job's status"
                },
                "created_at": {
                  "type": "string",
                  "description": "the date and time that the export job was created as a UTC string in YYYY-MM-DD HH:MM:SS format",
                  "format": "date-time"
                },
                "type": {
                  "type": "string",
                  "description": "the type of the export job"
                },
                "finished_at": {
                  "type": "string",
                  "description": "the date and time that the export job was finished as a UTC string in YYYY-MM-DD HH:MM:SS format, or null for jobs that have not run",
                  "format": "date-time"
                },
                "state": {
                  "type": "string",
                  "description": "the export job's state"
                },
                "result_url": {
                  "type": "string",
                  "description": "the url for the export job's results, if the job is complete"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/exports/activity": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "activity",
          "methodNameSnake": "activity"
        },
        "summary": "Export activity history",
        "description": "Begins an export of your activity history. The activity will be exported to a zip archive containing a single file named activity.csv in the same format as you would be able to export from your account's activity view. It includes the following fields: Date, Email Address, Sender, Subject, Status, Tags, Opens, Clicks, Bounce Detail. If you have configured any custom metadata fields, they will be included in the exported data.",
        "operationId": "postExportsActivity",
        "tags": ["exports"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "notify_email": {
                  "type": "string",
                  "description": "an optional email address to notify when the export job has finished",
                  "format": "email"
                },
                "date_from": {
                  "type": "string",
                  "description": "start date as a UTC string in YYYY-MM-DD HH:MM:SS format",
                  "format": "date-time"
                },
                "date_to": {
                  "type": "string",
                  "description": "end date as a UTC string in YYYY-MM-DD HH:MM:SS format",
                  "format": "date-time"
                },
                "tags": {
                  "type": "array",
                  "description": "an array of tag names to narrow the export to; will match messages that contain ANY of the tags",
                  "items": {
                    "type": "string",
                    "description": "a tag name"
                  }
                },
                "senders": {
                  "type": "array",
                  "description": "an array of senders to narrow the export to",
                  "items": {
                    "type": "string",
                    "description": "a sender address"
                  }
                },
                "states": {
                  "type": "array",
                  "description": "an array of message states to narrow the export to; messages with ANY of the states will be included",
                  "items": {
                    "type": "string",
                    "description": "a message state",
                    "enum": [
                      "sent",
                      "rejected",
                      "bounced",
                      "soft-bounced",
                      "spam",
                      "unsub"
                    ]
                  }
                },
                "api_keys": {
                  "type": "array",
                  "description": "an array of api keys to narrow the export to; messsagse sent with ANY of the keys will be included",
                  "items": {
                    "type": "string",
                    "description": "an API key associated with your account"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "information about the activity export job that was started",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "the unique identifier for this Export. Use this identifier when checking the export job's status"
                },
                "created_at": {
                  "type": "string",
                  "description": "the date and time that the export job was created as a UTC string in YYYY-MM-DD HH:MM:SS format",
                  "format": "date-time"
                },
                "type": {
                  "type": "string",
                  "description": "the type of the export job"
                },
                "finished_at": {
                  "type": "string",
                  "description": "the date and time that the export job was finished as a UTC string in YYYY-MM-DD HH:MM:SS format, or null for jobs that have not run",
                  "format": "date-time"
                },
                "state": {
                  "type": "string",
                  "description": "the export job's state"
                },
                "result_url": {
                  "type": "string",
                  "description": "the url for the export job's results, if the job is complete"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/inbound/domains": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "domains",
          "methodNameSnake": "domains"
        },
        "summary": "List inbound domains",
        "description": "List the domains that have been configured for inbound delivery.",
        "operationId": "postInboundDomains",
        "tags": ["inbound"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "the inbound domains associated with the account",
              "items": {
                "type": "object",
                "description": "the individual domain info",
                "properties": {
                  "domain": {
                    "type": "string",
                    "description": "the domain name that is accepting mail"
                  },
                  "created_at": {
                    "type": "string",
                    "description": "the date and time that the inbound domain was added as a UTC string in YYYY-MM-DD HH:MM:SS format",
                    "format": "date-time"
                  },
                  "valid_mx": {
                    "type": "boolean",
                    "description": "true if this inbound domain has successfully set up an MX record to deliver mail to the Mandrill servers"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/inbound/add-domain": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "addDomain",
          "methodNameSnake": "add_domain"
        },
        "summary": "Add inbound domain",
        "description": "Add an inbound domain to your account.",
        "operationId": "postInboundAddDomain",
        "tags": ["inbound"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "domain"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "domain": {
                  "type": "string",
                  "description": "a domain name; Validation: strip_tags, required"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "information about the domain",
              "properties": {
                "domain": {
                  "type": "string",
                  "description": "the domain name that is accepting mail"
                },
                "created_at": {
                  "type": "string",
                  "description": "the date and time that the inbound domain was added as a UTC string in YYYY-MM-DD HH:MM:SS format",
                  "format": "date-time"
                },
                "valid_mx": {
                  "type": "boolean",
                  "description": "true if this inbound domain has successfully set up an MX record to deliver mail to the Mandrill servers"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/inbound/check-domain": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "checkDomain",
          "methodNameSnake": "check_domain"
        },
        "summary": "Check domain settings",
        "description": "Check the MX settings for an inbound domain. The domain must have already been added with the add-domain call.",
        "operationId": "postInboundCheckDomain",
        "tags": ["inbound"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "domain"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "domain": {
                  "type": "string",
                  "description": "an existing inbound domain"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "information about the inbound domain",
              "properties": {
                "domain": {
                  "type": "string",
                  "description": "the domain name that is accepting mail"
                },
                "created_at": {
                  "type": "string",
                  "description": "the date and time that the inbound domain was added as a UTC string in YYYY-MM-DD HH:MM:SS format",
                  "format": "date-time"
                },
                "valid_mx": {
                  "type": "boolean",
                  "description": "true if this inbound domain has successfully set up an MX record to deliver mail to the Mandrill servers"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/inbound/delete-domain": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "deleteDomain",
          "methodNameSnake": "delete_domain"
        },
        "summary": "Delete inbound domain",
        "description": "Delete an inbound domain from the account. All mail will stop routing for this domain immediately.",
        "operationId": "postInboundDeleteDomain",
        "tags": ["inbound"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "domain"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "domain": {
                  "type": "string",
                  "description": "an existing inbound domain"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "information about the deleted domain",
              "properties": {
                "domain": {
                  "type": "string",
                  "description": "the domain name that is accepting mail"
                },
                "created_at": {
                  "type": "string",
                  "description": "the date and time that the inbound domain was added as a UTC string in YYYY-MM-DD HH:MM:SS format",
                  "format": "date-time"
                },
                "valid_mx": {
                  "type": "boolean",
                  "description": "true if this inbound domain has successfully set up an MX record to deliver mail to the Mandrill servers"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/inbound/routes": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "routes",
          "methodNameSnake": "routes"
        },
        "summary": "List mailbox routes",
        "description": "List the mailbox routes defined for an inbound domain.",
        "operationId": "postInboundRoutes",
        "tags": ["inbound"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "domain"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "domain": {
                  "type": "string",
                  "description": "the domain to check"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "the routes associated with the domain",
              "items": {
                "type": "object",
                "description": "the individual mailbox route",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "the unique identifier of the route"
                  },
                  "pattern": {
                    "type": "string",
                    "description": "the search pattern that the mailbox name should match"
                  },
                  "url": {
                    "type": "string",
                    "description": "the webhook URL where inbound messages will be published"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/inbound/add-route": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "addRoute",
          "methodNameSnake": "add_route"
        },
        "summary": "Add mailbox route",
        "description": "Add a new mailbox route to an inbound domain.",
        "operationId": "postInboundAddRoute",
        "tags": ["inbound"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "domain", "pattern", "url"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "domain": {
                  "type": "string",
                  "description": "an existing inbound domain"
                },
                "pattern": {
                  "type": "string",
                  "description": "the search pattern that the mailbox name should match"
                },
                "url": {
                  "type": "string",
                  "description": "the webhook URL where the inbound messages will be published"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the added mailbox route information",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "the unique identifier of the route"
                },
                "pattern": {
                  "type": "string",
                  "description": "the search pattern that the mailbox name should match"
                },
                "url": {
                  "type": "string",
                  "description": "the webhook URL where inbound messages will be published"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/inbound/update-route": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "updateRoute",
          "methodNameSnake": "update_route"
        },
        "summary": "Update mailbox route",
        "description": "Update the pattern or webhook of an existing inbound mailbox route. If null is provided for any fields, the values will remain unchanged.",
        "operationId": "postInboundUpdateRoute",
        "tags": ["inbound"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "id"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "id": {
                  "type": "string",
                  "description": "the unique identifier of an existing mailbox route"
                },
                "pattern": {
                  "type": "string",
                  "description": "the search pattern that the mailbox name should match"
                },
                "url": {
                  "type": "string",
                  "description": "the webhook URL where the inbound messages will be published; Validation: webhookexists"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the updated mailbox route information",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "the unique identifier of the route"
                },
                "pattern": {
                  "type": "string",
                  "description": "the search pattern that the mailbox name should match"
                },
                "url": {
                  "type": "string",
                  "description": "the webhook URL where inbound messages will be published"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/inbound/delete-route": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "deleteRoute",
          "methodNameSnake": "delete_route"
        },
        "summary": "Delete mailbox route",
        "description": "Delete an existing inbound mailbox route.",
        "operationId": "postInboundDeleteRoute",
        "tags": ["inbound"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "id"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "id": {
                  "type": "string",
                  "description": "the unique identifier of an existing route"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the deleted mailbox route information",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "the unique identifier of the route"
                },
                "pattern": {
                  "type": "string",
                  "description": "the search pattern that the mailbox name should match"
                },
                "url": {
                  "type": "string",
                  "description": "the webhook URL where inbound messages will be published"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/inbound/send-raw": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "sendRaw",
          "methodNameSnake": "send_raw"
        },
        "summary": "Send mime document",
        "description": "Take a raw MIME document destined for a domain with inbound domains set up, and send it to the inbound hook exactly as if it had been sent over SMTP.",
        "operationId": "postInboundSendRaw",
        "tags": ["inbound"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "raw_message"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "raw_message": {
                  "type": "string",
                  "description": "the full MIME document of an email message"
                },
                "to": {
                  "type": "array",
                  "description": "optionally define the recipients to receive the message - otherwise we'll use the To, Cc, and Bcc headers provided in the document",
                  "items": {
                    "type": "string",
                    "description": "the email address of the recipient",
                    "format": "email"
                  }
                },
                "mail_from": {
                  "type": "string",
                  "description": "the address specified in the MAIL FROM stage of the SMTP conversation. Required for the SPF check.",
                  "format": "email"
                },
                "helo": {
                  "type": "string",
                  "description": "the identification provided by the client mta in the MTA state of the SMTP conversation. Required for the SPF check."
                },
                "client_address": {
                  "type": "string",
                  "description": "the remote MTA's ip address. Optional; required for the SPF check."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "an array of the information for each recipient in the message (usually one) that matched an inbound route",
              "items": {
                "type": "object",
                "description": "the individual recipient information",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "the email address of the matching recipient"
                  },
                  "pattern": {
                    "type": "string",
                    "description": "the mailbox route pattern that the recipient matched"
                  },
                  "url": {
                    "type": "string",
                    "description": "the webhook URL that the message was posted to"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ips/list": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "list",
          "methodNameSnake": "list"
        },
        "summary": "List ip addresses",
        "description": "Lists your dedicated IPs.",
        "operationId": "postIpsList",
        "tags": ["ips"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "an array of objects for each dedicated IP",
              "items": {
                "type": "object",
                "description": "information about a single dedicated IP",
                "properties": {
                  "ip": {
                    "type": "string",
                    "description": "the ip address"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the date and time that the dedicated IP was created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                  },
                  "pool": {
                    "type": "string",
                    "description": "the name of the pool that this dedicated IP belongs to"
                  },
                  "domain": {
                    "type": "string",
                    "description": "the domain name (reverse dns) of this dedicated IP"
                  },
                  "custom_dns": {
                    "type": "object",
                    "description": "information about the ip's custom dns, if it has been configured",
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "a boolean indicating whether custom dns has been configured for this ip"
                      },
                      "valid": {
                        "type": "boolean",
                        "description": "whether the ip's custom dns is currently valid"
                      },
                      "error": {
                        "type": "string",
                        "description": "if the ip's custom dns is invalid, this will include details about the error"
                      }
                    }
                  },
                  "warmup": {
                    "type": "object",
                    "description": "information about the ip's warmup status",
                    "properties": {
                      "warming_up": {
                        "type": "boolean",
                        "description": "whether the ip is currently in warmup mode"
                      },
                      "start_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "the start time for the warmup process as a UTC string in YYYY-MM-DD HH:MM:SS format"
                      },
                      "end_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "the end date and time for the warmup process as a UTC string in YYYY-MM-DD HH:MM:SS format"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ips/info": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "info",
          "methodNameSnake": "info"
        },
        "summary": "Get ip info",
        "description": "Retrieves information about a single dedicated IP.",
        "operationId": "postIpsInfo",
        "tags": ["ips"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "ip": {
                  "type": "string",
                  "description": "a dedicated IP address"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "Information about the dedicated ip",
              "properties": {
                "ip": {
                  "type": "string",
                  "description": "the ip address"
                },
                "created_at": {
                  "type": "string",
                  "description": "the date and time that the dedicated IP was created as a UTC string in YYYY-MM-DD HH:MM:SS format",
                  "format": "date-time"
                },
                "pool": {
                  "type": "string",
                  "description": "the name of the pool that this dedicated IP belongs to"
                },
                "domain": {
                  "type": "string",
                  "description": "the domain name (reverse dns) of this dedicated IP"
                },
                "custom_dns": {
                  "type": "object",
                  "description": "information about the ip's custom dns, if it has been configured",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "a boolean indicating whether custom dns has been configured for this ip"
                    },
                    "valid": {
                      "type": "boolean",
                      "description": "whether the ip's custom dns is currently valid"
                    },
                    "error": {
                      "type": "string",
                      "description": "if the ip's custom dns is invalid, this will include details about the error"
                    }
                  }
                },
                "warmup": {
                  "type": "object",
                  "description": "information about the ip's warmup status",
                  "properties": {
                    "warming_up": {
                      "type": "boolean",
                      "description": "whether the ip is currently in warmup mode"
                    },
                    "start_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "the start time for the warmup process as a UTC string in YYYY-MM-DD HH:MM:SS format"
                    },
                    "end_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "the end date and time for the warmup process as a UTC string in YYYY-MM-DD HH:MM:SS format"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ips/provision": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "provision",
          "methodNameSnake": "provision"
        },
        "summary": "Request additional ip",
        "description": "Requests an additional dedicated IP for your account. Accounts may have one outstanding request at any time, and provisioning requests are processed within 24 hours.",
        "operationId": "postIpsProvision",
        "tags": ["ips"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "warmup": {
                  "type": "boolean",
                  "description": "whether to enable warmup mode for the ip"
                },
                "pool": {
                  "type": "string",
                  "description": "the id of the pool to add the dedicated ip to, or null to use your account's default pool"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "a description of the provisioning request that was created",
              "properties": {
                "requested_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the request was created as a UTC timestamp in YYYY-MM-DD HH:MM:SS format"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ips/start-warmup": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "startWarmup",
          "methodNameSnake": "start_warmup"
        },
        "summary": "Start ip warmup",
        "description": "Begins the warmup process for a dedicated IP. During the warmup process, the Transactional API will gradually increase the percentage of your mail that is sent over the warming-up IP, over a period of roughly 30 days. The rest of your mail will be sent over shared IPs or other dedicated IPs in the same pool.",
        "operationId": "postIpsStartWarmup",
        "tags": ["ips"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "ip"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "ip": {
                  "type": "string",
                  "description": "a dedicated ip address"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "Information about the dedicated IP",
              "properties": {
                "ip": {
                  "type": "string",
                  "description": "the ip address"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the dedicated IP was created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "pool": {
                  "type": "string",
                  "description": "the name of the pool that this dedicated IP belongs to"
                },
                "domain": {
                  "type": "string",
                  "description": "the domain name (reverse dns) of this dedicated IP"
                },
                "custom_dns": {
                  "type": "object",
                  "description": "information about the ip's custom dns, if it has been configured",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "a boolean indicating whether custom dns has been configured for this ip"
                    },
                    "valid": {
                      "type": "boolean",
                      "description": "whether the ip's custom dns is currently valid"
                    },
                    "error": {
                      "type": "string",
                      "description": "if the ip's custom dns is invalid, this will include details about the error"
                    }
                  }
                },
                "warmup": {
                  "type": "object",
                  "description": "information about the ip's warmup status",
                  "properties": {
                    "warming_up": {
                      "type": "boolean",
                      "description": "whether the ip is currently in warmup mode"
                    },
                    "start_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "the start time for the warmup process as a UTC string in YYYY-MM-DD HH:MM:SS format"
                    },
                    "end_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "the end date and time for the warmup process as a UTC string in YYYY-MM-DD HH:MM:SS format"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ips/cancel-warmup": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "cancelWarmup",
          "methodNameSnake": "cancel_warmup"
        },
        "summary": "Cancel ip warmup",
        "description": "Cancels the warmup process for a dedicated IP.",
        "operationId": "postIpsCancelWarmup",
        "tags": ["ips"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "ip"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "ip": {
                  "type": "string",
                  "description": "a dedicated ip address"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "Information about the dedicated IP",
              "properties": {
                "ip": {
                  "type": "string",
                  "description": "the ip address"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the dedicated IP was created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "pool": {
                  "type": "string",
                  "description": "the name of the pool that this dedicated IP belongs to"
                },
                "domain": {
                  "type": "string",
                  "description": "the domain name (reverse dns) of this dedicated IP"
                },
                "custom_dns": {
                  "type": "object",
                  "description": "information about the ip's custom dns, if it has been configured",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "a boolean indicating whether custom dns has been configured for this ip"
                    },
                    "valid": {
                      "type": "boolean",
                      "description": "whether the ip's custom dns is currently valid"
                    },
                    "error": {
                      "type": "string",
                      "description": "if the ip's custom dns is invalid, this will include details about the error"
                    }
                  }
                },
                "warmup": {
                  "type": "object",
                  "description": "information about the ip's warmup status",
                  "properties": {
                    "warming_up": {
                      "type": "boolean",
                      "description": "whether the ip is currently in warmup mode"
                    },
                    "start_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "the start time for the warmup process as a UTC string in YYYY-MM-DD HH:MM:SS format"
                    },
                    "end_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "the end date and time for the warmup process as a UTC string in YYYY-MM-DD HH:MM:SS format"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ips/set-pool": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "setPool",
          "methodNameSnake": "set_pool"
        },
        "summary": "Move ip to different pool",
        "description": "Moves a dedicated IP to a different pool.",
        "operationId": "postIpsSetPool",
        "tags": ["ips"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "ip", "pool"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "ip": {
                  "type": "string",
                  "description": "a dedicated ip address"
                },
                "pool": {
                  "type": "string",
                  "description": "the name of the new pool to add the dedicated ip to"
                },
                "create_pool": {
                  "type": "boolean",
                  "description": "whether to create the pool if it does not exist; if false and the pool does not exist, an Unknown_Pool will be thrown."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "Information about the updated state of the dedicated IP",
              "properties": {
                "ip": {
                  "type": "string",
                  "description": "the ip address"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the dedicated IP was created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "pool": {
                  "type": "string",
                  "description": "the name of the pool that this dedicated IP belongs to"
                },
                "domain": {
                  "type": "string",
                  "description": "the domain name (reverse dns) of this dedicated IP"
                },
                "custom_dns": {
                  "type": "object",
                  "description": "information about the ip's custom dns, if it has been configured",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "a boolean indicating whether custom dns has been configured for this ip"
                    },
                    "valid": {
                      "type": "boolean",
                      "description": "whether the ip's custom dns is currently valid"
                    },
                    "error": {
                      "type": "string",
                      "description": "if the ip's custom dns is invalid, this will include details about the error"
                    }
                  }
                },
                "warmup": {
                  "type": "object",
                  "description": "information about the ip's warmup status",
                  "properties": {
                    "warming_up": {
                      "type": "boolean",
                      "description": "whether the ip is currently in warmup mode"
                    },
                    "start_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "the start time for the warmup process as a UTC string in YYYY-MM-DD HH:MM:SS format"
                    },
                    "end_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "the end date and time for the warmup process as a UTC string in YYYY-MM-DD HH:MM:SS format"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ips/delete": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "delete",
          "methodNameSnake": "delete"
        },
        "summary": "Delete ip address",
        "description": "Deletes a dedicated IP. This is permanent and cannot be undone.",
        "operationId": "postIpsDelete",
        "tags": ["ips"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "ip"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "ip": {
                  "type": "string",
                  "description": "the dedicated ip to remove from your account"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "a description of the ip that was removed from your account.",
              "properties": {
                "ip": {
                  "type": "string",
                  "description": "the ip address"
                },
                "deleted": {
                  "type": "string",
                  "description": "a boolean indicating whether the ip was successfully deleted"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ips/list-pools": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "listPools",
          "methodNameSnake": "list_pools"
        },
        "summary": "List ip pools",
        "description": "Lists your dedicated IP pools.",
        "operationId": "postIpsListPools",
        "tags": ["ips"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "the dedicated IP pools for your account, up to a maximum of 1,000",
              "items": {
                "type": "object",
                "description": "information about each dedicated IP pool",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "this pool's name"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the date and time that this pool was created as a UTC timestamp in YYYY-MM-DD HH:MM:SS format"
                  },
                  "ips": {
                    "type": "array",
                    "description": "the dedicated IPs in this pool",
                    "items": {
                      "type": "object",
                      "description": "information about each dedicated IP",
                      "properties": {
                        "ip": {
                          "type": "string",
                          "description": "the ip address"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "the date and time that the dedicated IP was created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                        },
                        "pool": {
                          "type": "string",
                          "description": "the name of the pool that this dedicated IP belongs to"
                        },
                        "domain": {
                          "type": "string",
                          "description": "the domain name (reverse dns) of this dedicated IP"
                        },
                        "custom_dns": {
                          "type": "object",
                          "description": "information about the ip's custom dns, if it has been configured",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "a boolean indicating whether custom dns has been configured for this ip"
                            },
                            "valid": {
                              "type": "boolean",
                              "description": "whether the ip's custom dns is currently valid"
                            },
                            "error": {
                              "type": "string",
                              "description": "if the ip's custom dns is invalid, this will include details about the error"
                            }
                          }
                        },
                        "warmup": {
                          "type": "object",
                          "description": "information about the ip's warmup status",
                          "properties": {
                            "warming_up": {
                              "type": "boolean",
                              "description": "whether the ip is currently in warmup mode"
                            },
                            "start_at": {
                              "type": "string",
                              "format": "date-time",
                              "description": "the start time for the warmup process as a UTC string in YYYY-MM-DD HH:MM:SS format"
                            },
                            "end_at": {
                              "type": "string",
                              "format": "date-time",
                              "description": "the end date and time for the warmup process as a UTC string in YYYY-MM-DD HH:MM:SS format"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ips/pool-info": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "poolInfo",
          "methodNameSnake": "pool_info"
        },
        "summary": "Get ip pool info",
        "description": "Describes a single dedicated IP pool.",
        "operationId": "postIpsPoolInfo",
        "tags": ["ips"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "pool"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "pool": {
                  "type": "string",
                  "description": "a pool name"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "Information about the dedicated ip pool",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "this pool's name"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that this pool was created as a UTC timestamp in YYYY-MM-DD HH:MM:SS format"
                },
                "ips": {
                  "type": "array",
                  "description": "the dedicated IPs in this pool",
                  "items": {
                    "type": "object",
                    "description": "information about each dedicated IP",
                    "properties": {
                      "ip": {
                        "type": "string",
                        "description": "the ip address"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "the date and time that the dedicated IP was created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                      },
                      "pool": {
                        "type": "string",
                        "description": "the name of the pool that this dedicated IP belongs to"
                      },
                      "domain": {
                        "type": "string",
                        "description": "the domain name (reverse dns) of this dedicated IP"
                      },
                      "custom_dns": {
                        "type": "object",
                        "description": "information about the ip's custom dns, if it has been configured",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "a boolean indicating whether custom dns has been configured for this ip"
                          },
                          "valid": {
                            "type": "boolean",
                            "description": "whether the ip's custom dns is currently valid"
                          },
                          "error": {
                            "type": "string",
                            "description": "if the ip's custom dns is invalid, this will include details about the error"
                          }
                        }
                      },
                      "warmup": {
                        "type": "object",
                        "description": "information about the ip's warmup status",
                        "properties": {
                          "warming_up": {
                            "type": "boolean",
                            "description": "whether the ip is currently in warmup mode"
                          },
                          "start_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "the start time for the warmup process as a UTC string in YYYY-MM-DD HH:MM:SS format"
                          },
                          "end_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "the end date and time for the warmup process as a UTC string in YYYY-MM-DD HH:MM:SS format"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ips/create-pool": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "createPool",
          "methodNameSnake": "create_pool"
        },
        "summary": "Add ip pool",
        "description": "Creates a pool and returns it. If a pool already exists with this name, no action will be performed.",
        "operationId": "postIpsCreatePool",
        "tags": ["ips"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "pool"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "pool": {
                  "type": "string",
                  "description": "the name of a pool to create"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "Information about the dedicated ip pool",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "this pool's name"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that this pool was created as a UTC timestamp in YYYY-MM-DD HH:MM:SS format"
                },
                "ips": {
                  "type": "array",
                  "description": "the dedicated IPs in this pool",
                  "items": {
                    "type": "object",
                    "description": "information about each dedicated IP",
                    "properties": {
                      "ip": {
                        "type": "string",
                        "description": "the ip address"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "the date and time that the dedicated IP was created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                      },
                      "pool": {
                        "type": "string",
                        "description": "the name of the pool that this dedicated IP belongs to"
                      },
                      "domain": {
                        "type": "string",
                        "description": "the domain name (reverse dns) of this dedicated IP"
                      },
                      "custom_dns": {
                        "type": "object",
                        "description": "information about the ip's custom dns, if it has been configured",
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "a boolean indicating whether custom dns has been configured for this ip"
                          },
                          "valid": {
                            "type": "boolean",
                            "description": "whether the ip's custom dns is currently valid"
                          },
                          "error": {
                            "type": "string",
                            "description": "if the ip's custom dns is invalid, this will include details about the error"
                          }
                        }
                      },
                      "warmup": {
                        "type": "object",
                        "description": "information about the ip's warmup status",
                        "properties": {
                          "warming_up": {
                            "type": "boolean",
                            "description": "whether the ip is currently in warmup mode"
                          },
                          "start_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "the start time for the warmup process as a UTC string in YYYY-MM-DD HH:MM:SS format"
                          },
                          "end_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "the end date and time for the warmup process as a UTC string in YYYY-MM-DD HH:MM:SS format"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ips/delete-pool": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "deletePool",
          "methodNameSnake": "delete_pool"
        },
        "summary": "Delete ip pool",
        "description": "Deletes a pool. A pool must be empty before you can delete it, and you cannot delete your default pool.",
        "operationId": "postIpsDeletePool",
        "tags": ["ips"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "pool"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "pool": {
                  "type": "string",
                  "description": "the name of the pool to delete"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "information about the status of the pool that was deleted",
              "properties": {
                "pool": {
                  "type": "string",
                  "description": "the name of the pool"
                },
                "deleted": {
                  "type": "boolean",
                  "description": "whether the pool was deleted"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ips/check-custom-dns": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "checkCustomDns",
          "methodNameSnake": "check_custom_dns"
        },
        "summary": "Test custom dns",
        "description": "Tests whether a domain name is valid for use as the custom reverse DNS for a dedicated IP.",
        "operationId": "postIpsCheckCustomDns",
        "tags": ["ips"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "ip", "domain"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "ip": {
                  "type": "string",
                  "description": "a dedicated ip address"
                },
                "domain": {
                  "type": "string",
                  "description": "the domain name to test"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "information about the dedicated IP's new configuration",
              "properties": {
                "valid": {
                  "type": "string",
                  "description": "whether the domain name has a correctly-configured A record pointing to the ip address"
                },
                "error": {
                  "type": "string",
                  "description": "if valid is false, this will contain details about why the domain's A record is incorrect"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ips/set-custom-dns": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "setCustomDns",
          "methodNameSnake": "set_custom_dns"
        },
        "summary": "Set custom dns",
        "description": "Configures the custom DNS name for a dedicated IP.",
        "operationId": "postIpsSetCustomDns",
        "tags": ["ips"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "ip", "domain"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "ip": {
                  "type": "string",
                  "description": "a dedicated ip address"
                },
                "domain": {
                  "type": "string",
                  "description": "a domain name to set as the dedicated IP's custom dns name."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "information about the dedicated IP's new configuration",
              "properties": {
                "ip": {
                  "type": "string",
                  "description": "the ip address"
                },
                "created_at": {
                  "type": "string",
                  "description": "the date and time that the dedicated IP was created as a UTC string in YYYY-MM-DD HH:MM:SS format",
                  "format": "date-time"
                },
                "pool": {
                  "type": "string",
                  "description": "the name of the pool that this dedicated IP belongs to"
                },
                "domain": {
                  "type": "string",
                  "description": "the domain name (reverse dns) of this dedicated IP"
                },
                "custom_dns": {
                  "type": "object",
                  "description": "information about the ip's custom dns, if it has been configured",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "a boolean indicating whether custom dns has been configured for this ip"
                    },
                    "valid": {
                      "type": "boolean",
                      "description": "whether the ip's custom dns is currently valid"
                    },
                    "error": {
                      "type": "string",
                      "description": "if the ip's custom dns is invalid, this will include details about the error"
                    }
                  }
                },
                "warmup": {
                  "type": "object",
                  "description": "information about the ip's warmup status",
                  "properties": {
                    "warming_up": {
                      "type": "boolean",
                      "description": "whether the ip is currently in warmup mode"
                    },
                    "start_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "the start time for the warmup process as a UTC string in YYYY-MM-DD HH:MM:SS format"
                    },
                    "end_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "the end date and time for the warmup process as a UTC string in YYYY-MM-DD HH:MM:SS format"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/messages/send": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "send",
          "methodNameSnake": "send"
        },
        "summary": "Send new message",
        "description": "Send a new transactional message through the Transactional API.",
        "operationId": "postMessagesSend",
        "tags": ["messages"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "message"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "message": {
                  "type": "object",
                  "description": "the information on the message to send",
                  "properties": {
                    "html": {
                      "type": "string",
                      "description": "the full HTML content to be sent"
                    },
                    "text": {
                      "type": "string",
                      "description": "optional full text content to be sent"
                    },
                    "subject": {
                      "type": "string",
                      "description": "the message subject"
                    },
                    "from_email": {
                      "type": "string",
                      "description": "the sender email address",
                      "format": "email"
                    },
                    "from_name": {
                      "type": "string",
                      "description": "optional from name to be used"
                    },
                    "to": {
                      "type": "array",
                      "description": "an array of recipient information.",
                      "items": {
                        "type": "object",
                        "description": "a single recipient's information",
                        "required": ["email"],
                        "properties": {
                          "email": {
                            "type": "string",
                            "description": "the email address of the recipient",
                            "format": "email"
                          },
                          "name": {
                            "type": "string",
                            "description": "the optional display name to use for the recipient"
                          },
                          "type": {
                            "type": "string",
                            "description": "the header type to use for the recipient, defaults to \"to\" if not provided",
                            "enum": ["to", "cc", "bcc"]
                          }
                        }
                      }
                    },
                    "headers": {
                      "type": "object",
                      "description": "optional extra headers to add to the message (most headers are allowed)"
                    },
                    "important": {
                      "type": "boolean",
                      "description": "whether or not this message is important, and should be delivered ahead of non-important messages"
                    },
                    "track_opens": {
                      "type": "boolean",
                      "description": "whether or not to turn on open tracking for the message"
                    },
                    "track_clicks": {
                      "type": "boolean",
                      "description": "whether or not to turn on click tracking for the message"
                    },
                    "auto_text": {
                      "type": "boolean",
                      "description": "whether or not to automatically generate a text part for messages that are not given text"
                    },
                    "auto_html": {
                      "type": "boolean",
                      "description": "whether or not to automatically generate an HTML part for messages that are not given HTML"
                    },
                    "inline_css": {
                      "type": "boolean",
                      "description": "whether or not to automatically inline all CSS styles provided in the message HTML - only for HTML documents less than 256KB in size"
                    },
                    "url_strip_qs": {
                      "type": "boolean",
                      "description": "whether or not to strip the query string from URLs when aggregating tracked URL data"
                    },
                    "preserve_recipients": {
                      "type": "boolean",
                      "description": "whether or not to expose all recipients in to \"To\" header for each email"
                    },
                    "view_content_link": {
                      "type": "boolean",
                      "description": "set to false to remove content logging for sensitive emails"
                    },
                    "bcc_address": {
                      "type": "string",
                      "description": "an optional address to receive an exact copy of each recipient's email",
                      "format": "email"
                    },
                    "tracking_domain": {
                      "type": "string",
                      "description": "a custom domain to use for tracking opens and clicks instead of mandrillapp.com"
                    },
                    "signing_domain": {
                      "type": "string",
                      "description": "a custom domain to use for SPF/DKIM signing instead of mandrill (for \"via\" or \"on behalf of\" in email clients)"
                    },
                    "return_path_domain": {
                      "type": "string",
                      "description": "a custom domain to use for the messages's return-path"
                    },
                    "merge": {
                      "type": "boolean",
                      "description": "whether to evaluate merge tags in the message. Will automatically be set to true if either merge_vars or global_merge_vars are provided."
                    },
                    "merge_language": {
                      "type": "string",
                      "description": "the merge tag language to use when evaluating merge tags, either mailchimp or handlebars",
                      "enum": ["mailchimp", "handlebars"]
                    },
                    "global_merge_vars": {
                      "type": "array",
                      "description": "global merge variables to use for all recipients. You can override these per recipient.",
                      "items": {
                        "type": "object",
                        "description": "a single global merge variable",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "the global merge variable's name. Merge variable names are case-insensitive and may not start with _"
                          },
                          "content": {
                            "type": "string",
                            "description": "the global merge variable's content"
                          }
                        }
                      }
                    },
                    "merge_vars": {
                      "type": "array",
                      "description": "per-recipient merge variables, which override global merge variables with the same name.",
                      "items": {
                        "type": "object",
                        "description": "per-recipient merge variables",
                        "required": ["rcpt"],
                        "properties": {
                          "rcpt": {
                            "type": "string",
                            "description": "the email address of the recipient that the merge variables should apply to",
                            "format": "email"
                          },
                          "vars": {
                            "type": "array",
                            "description": "the recipient's merge variables",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "the merge variable's name. Merge variable names are case-insensitive and may not start with _"
                                },
                                "content": {
                                  "type": "string",
                                  "description": "the merge variable's content"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "tags": {
                      "type": "array",
                      "description": "an array of string to tag the message with. Stats are accumulated using tags, though we only store the first 100 we see, so this should not be unique or change frequently. Tags should be 50 characters or less. Any tags starting with an underscore are reserved for internal use and will cause errors.",
                      "items": {
                        "type": "string",
                        "description": "a single tag - must not start with an underscore"
                      }
                    },
                    "subaccount": {
                      "type": "string",
                      "description": "the unique id of a subaccount for this message - must already exist or will fail with an error"
                    },
                    "google_analytics_domains": {
                      "type": "array",
                      "description": "an array of strings indicating for which any matching URLs will automatically have Google Analytics parameters appended to their query string automatically.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "google_analytics_campaign": {
                      "type": "string",
                      "description": "optional string indicating the value to set for the utm_campaign tracking parameter. If this isn't provided the email's from address will be used instead.",
                      "format": "email"
                    },
                    "metadata": {
                      "type": "object",
                      "description": "metadata an associative array of user metadata. Mandrill will store this metadata and make it available for retrieval. In addition, you can select up to 10 metadata fields to index and make searchable using the Mandrill search api.",
                      "properties": {
                        "website": {
                          "type": "string",
                          "description": "a valid website url"
                        }
                      }
                    },
                    "recipient_metadata": {
                      "type": "array",
                      "description": "Per-recipient metadata that will override the global values specified in the metadata parameter.",
                      "items": {
                        "type": "object",
                        "description": "metadata for a single recipient",
                        "properties": {
                          "rcpt": {
                            "type": "string",
                            "description": "the email address of the recipient that the metadata is associated with",
                            "format": "email"
                          },
                          "values": {
                            "type": "object",
                            "description": "an associated array containing the recipient's unique metadata. If a key exists in both the per-recipient metadata and the global metadata, the per-recipient metadata will be used.",
                            "properties": {
                              "user_id": {
                                "type": "integer",
                                "description": ""
                              }
                            }
                          }
                        }
                      }
                    },
                    "attachments": {
                      "type": "array",
                      "description": "an array of supported attachments to add to the message",
                      "items": {
                        "type": "object",
                        "description": "a single supported attachment",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "the MIME type of the attachment"
                          },
                          "name": {
                            "type": "string",
                            "description": "the file name of the attachment"
                          },
                          "content": {
                            "type": "string",
                            "description": "the content of the attachment as a base64-encoded string"
                          }
                        }
                      }
                    },
                    "images": {
                      "type": "array",
                      "description": "an array of embedded images to add to the message",
                      "items": {
                        "type": "object",
                        "description": "a single embedded image",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "the MIME type of the image - must start with \"image/\""
                          },
                          "name": {
                            "type": "string",
                            "description": "the Content ID of the image - use <img src=\"cid:THIS_VALUE\"> to reference the image in your HTML content"
                          },
                          "content": {
                            "type": "string",
                            "description": "the content of the image as a base64-encoded string"
                          }
                        }
                      }
                    }
                  }
                },
                "async": {
                  "type": "boolean",
                  "description": "enable a background sending mode that is optimized for bulk sending. In async mode, messages/send will immediately return a status of \"queued\" for every recipient. To handle rejections when sending in async mode, set up a webhook for the 'reject' event. Defaults to false for messages with no more than 10 recipients; messages with more than 10 recipients are always sent asynchronously, regardless of the value of async."
                },
                "ip_pool": {
                  "type": "string",
                  "description": "the name of the dedicated ip pool that should be used to send the message. If you do not have any dedicated IPs, this parameter has no effect. If you specify a pool that does not exist, your default pool will be used instead."
                },
                "send_at": {
                  "type": "string",
                  "description": "when this message should be sent as a UTC timestamp in YYYY-MM-DD HH:MM:SS format. If you specify a time in the past, the message will be sent immediately; for future dates, you're limited to one year from the date of scheduling.",
                  "format": "date-time"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "an array of objects for each recipient containing the key \"email\" with the email address, and details of the message status for that recipient",
              "items": {
                "type": "object",
                "description": "the sending results for a single recipient",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "the email address of the recipient"
                  },
                  "status": {
                    "type": "string",
                    "description": "the sending status of the recipient",
                    "enum": [
                      "sent",
                      "queued",
                      "scheduled",
                      "rejected",
                      "invalid"
                    ]
                  },
                  "reject_reason": {
                    "type": "string",
                    "description": "the reason for the rejection if the recipient status is \"rejected\"",
                    "enum": [
                      "hard-bounce",
                      "soft-bounce",
                      "spam",
                      "unsub",
                      "custom",
                      "invalid-sender",
                      "invalid",
                      "test-mode-limit",
                      "unsigned",
                      "rule"
                    ]
                  },
                  "_id": {
                    "type": "string",
                    "description": "the message's unique id"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/messages/send-template": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "sendTemplate",
          "methodNameSnake": "send_template"
        },
        "summary": "Send using message template",
        "description": "Send a new transactional message through the Transactional API using a template.",
        "operationId": "postMessagesSendTemplate",
        "tags": ["messages"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "key",
                "template_name",
                "template_content",
                "message"
              ],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "template_name": {
                  "type": "string",
                  "description": "the immutable name or slug of a template that exists in the user's account. For backwards-compatibility, the template name may also be used but the immutable slug is preferred."
                },
                "template_content": {
                  "type": "array",
                  "description": "an array of template content to send. Each item in the array should be a struct with two keys - name: the name of the content block to set the content for, and content: the actual content to put into the block",
                  "items": {
                    "type": "object",
                    "description": "the injection of a single piece of content into a single editable region",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "the name of the mc:edit editable region to inject into"
                      },
                      "content": {
                        "type": "string",
                        "description": "the content to inject"
                      }
                    }
                  }
                },
                "message": {
                  "type": "object",
                  "description": "the other information on the message to send - same as /messages/send, but without the html content",
                  "properties": {
                    "html": {
                      "type": "string",
                      "description": "optional full HTML content to be sent if not in template"
                    },
                    "text": {
                      "type": "string",
                      "description": "optional full text content to be sent"
                    },
                    "subject": {
                      "type": "string",
                      "description": "the message subject"
                    },
                    "from_email": {
                      "type": "string",
                      "description": "the sender email address",
                      "format": "email"
                    },
                    "from_name": {
                      "type": "string",
                      "description": "optional from name to be used"
                    },
                    "to": {
                      "type": "array",
                      "description": "an array of recipient information.",
                      "items": {
                        "type": "object",
                        "description": "a single recipient's information",
                        "required": ["email"],
                        "properties": {
                          "email": {
                            "type": "string",
                            "description": "the email address of the recipient",
                            "format": "email"
                          },
                          "name": {
                            "type": "string",
                            "description": "the optional display name to use for the recipient"
                          },
                          "type": {
                            "type": "string",
                            "description": "the header type to use for the recipient, defaults to \"to\" if not provided",
                            "enum": ["to", "cc", "bcc"]
                          }
                        }
                      }
                    },
                    "headers": {
                      "type": "object",
                      "description": "optional extra headers to add to the message (most headers are allowed)"
                    },
                    "important": {
                      "type": "boolean",
                      "description": "whether or not this message is important, and should be delivered ahead of non-important messages"
                    },
                    "track_opens": {
                      "type": "boolean",
                      "description": "whether or not to turn on open tracking for the message"
                    },
                    "track_clicks": {
                      "type": "boolean",
                      "description": "whether or not to turn on click tracking for the message"
                    },
                    "auto_text": {
                      "type": "boolean",
                      "description": "whether or not to automatically generate a text part for messages that are not given text"
                    },
                    "auto_html": {
                      "type": "boolean",
                      "description": "whether or not to automatically generate an HTML part for messages that are not given HTML"
                    },
                    "inline_css": {
                      "type": "boolean",
                      "description": "whether or not to automatically inline all CSS styles provided in the message HTML - only for HTML documents less than 256KB in size"
                    },
                    "url_strip_qs": {
                      "type": "boolean",
                      "description": "whether or not to strip the query string from URLs when aggregating tracked URL data"
                    },
                    "preserve_recipients": {
                      "type": "boolean",
                      "description": "whether or not to expose all recipients in to \"To\" header for each email"
                    },
                    "view_content_link": {
                      "type": "boolean",
                      "description": "set to false to remove content logging for sensitive emails"
                    },
                    "bcc_address": {
                      "type": "string",
                      "description": "an optional address to receive an exact copy of each recipient's email",
                      "format": "email"
                    },
                    "tracking_domain": {
                      "type": "string",
                      "description": "a custom domain to use for tracking opens and clicks instead of mandrillapp.com"
                    },
                    "signing_domain": {
                      "type": "string",
                      "description": "a custom domain to use for SPF/DKIM signing instead of mandrill (for \"via\" or \"on behalf of\" in email clients)"
                    },
                    "return_path_domain": {
                      "type": "string",
                      "description": "a custom domain to use for the messages's return-path"
                    },
                    "merge": {
                      "type": "boolean",
                      "description": "whether to evaluate merge tags in the message. Will automatically be set to true if either merge_vars or global_merge_vars are provided."
                    },
                    "merge_language": {
                      "type": "string",
                      "description": "the merge tag language to use when evaluating merge tags, either mailchimp or handlebars",
                      "enum": ["mailchimp", "handlebars"]
                    },
                    "global_merge_vars": {
                      "type": "array",
                      "description": "global merge variables to use for all recipients. You can override these per recipient.",
                      "items": {
                        "type": "object",
                        "description": "a single global merge variable",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "the global merge variable's name. Merge variable names are case-insensitive and may not start with _"
                          },
                          "content": {
                            "type": "string",
                            "description": "the global merge variable's content"
                          }
                        }
                      }
                    },
                    "merge_vars": {
                      "type": "array",
                      "description": "per-recipient merge variables, which override global merge variables with the same name.",
                      "items": {
                        "type": "object",
                        "description": "per-recipient merge variables",
                        "required": ["rcpt"],
                        "properties": {
                          "rcpt": {
                            "type": "string",
                            "description": "the email address of the recipient that the merge variables should apply to",
                            "format": "email"
                          },
                          "vars": {
                            "type": "array",
                            "description": "the recipient's merge variables",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "the merge variable's name. Merge variable names are case-insensitive and may not start with _"
                                },
                                "content": {
                                  "type": "string",
                                  "description": "the merge variable's content"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "tags": {
                      "type": "array",
                      "description": "an array of string to tag the message with. Stats are accumulated using tags, though we only store the first 100 we see, so this should not be unique or change frequently. Tags should be 50 characters or less. Any tags starting with an underscore are reserved for internal use and will cause errors.",
                      "items": {
                        "type": "string",
                        "description": "a single tag - must not start with an underscore"
                      }
                    },
                    "subaccount": {
                      "type": "string",
                      "description": "the unique id of a subaccount for this message - must already exist or will fail with an error"
                    },
                    "google_analytics_domains": {
                      "type": "array",
                      "description": "an array of strings indicating for which any matching URLs will automatically have Google Analytics parameters appended to their query string automatically.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "google_analytics_campaign": {
                      "type": "string",
                      "description": "optional string indicating the value to set for the utm_campaign tracking parameter. If this isn't provided the email's from address will be used instead.",
                      "format": "email"
                    },
                    "metadata": {
                      "type": "object",
                      "description": "metadata an associative array of user metadata. Mandrill will store this metadata and make it available for retrieval. In addition, you can select up to 10 metadata fields to index and make searchable using the Mandrill search api.",
                      "properties": {
                        "website": {
                          "type": "string",
                          "description": "a valid website url"
                        }
                      }
                    },
                    "recipient_metadata": {
                      "type": "array",
                      "description": "Per-recipient metadata that will override the global values specified in the metadata parameter.",
                      "items": {
                        "type": "object",
                        "description": "metadata for a single recipient",
                        "properties": {
                          "rcpt": {
                            "type": "string",
                            "description": "the email address of the recipient that the metadata is associated with",
                            "format": "email"
                          },
                          "values": {
                            "type": "object",
                            "description": "an associated array containing the recipient's unique metadata. If a key exists in both the per-recipient metadata and the global metadata, the per-recipient metadata will be used.",
                            "properties": {
                              "user_id": {
                                "type": "integer",
                                "description": ""
                              }
                            }
                          }
                        }
                      }
                    },
                    "attachments": {
                      "type": "array",
                      "description": "an array of supported attachments to add to the message",
                      "items": {
                        "type": "object",
                        "description": "a single supported attachment",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "the MIME type of the attachment"
                          },
                          "name": {
                            "type": "string",
                            "description": "the file name of the attachment"
                          },
                          "content": {
                            "type": "string",
                            "description": "the content of the attachment as a base64-encoded string"
                          }
                        }
                      }
                    },
                    "images": {
                      "type": "array",
                      "description": "an array of embedded images to add to the message",
                      "items": {
                        "type": "object",
                        "description": "a single embedded image",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "the MIME type of the image - must start with \"image/\""
                          },
                          "name": {
                            "type": "string",
                            "description": "the Content ID of the image - use <img src=\"cid:THIS_VALUE\"> to reference the image in your HTML content"
                          },
                          "content": {
                            "type": "string",
                            "description": "the content of the image as a base64-encoded string"
                          }
                        }
                      }
                    }
                  }
                },
                "async": {
                  "type": "boolean",
                  "description": "enable a background sending mode that is optimized for bulk sending. In async mode, messages/send will immediately return a status of \"queued\" for every recipient. To handle rejections when sending in async mode, set up a webhook for the 'reject' event. Defaults to false for messages with no more than 10 recipients; messages with more than 10 recipients are always sent asynchronously, regardless of the value of async."
                },
                "ip_pool": {
                  "type": "string",
                  "description": "the name of the dedicated ip pool that should be used to send the message. If you do not have any dedicated IPs, this parameter has no effect. If you specify a pool that does not exist, your default pool will be used instead."
                },
                "send_at": {
                  "type": "string",
                  "description": "when this message should be sent as a UTC timestamp in YYYY-MM-DD HH:MM:SS format. If you specify a time in the past, the message will be sent immediately; for future dates, you're limited to one year from the date of scheduling.",
                  "format": "date-time"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "an array of objects for each recipient containing the key \"email\" with the email address, and details of the message status for that recipient",
              "items": {
                "type": "object",
                "description": "the sending results for a single recipient",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "the email address of the recipient"
                  },
                  "status": {
                    "type": "string",
                    "description": "the sending status of the recipient",
                    "enum": ["sent", "queued", "rejected", "invalid"]
                  },
                  "reject_reason": {
                    "type": "string",
                    "description": "the reason for the rejection if the recipient status is \"rejected\"",
                    "enum": [
                      "hard-bounce",
                      "soft-bounce",
                      "spam",
                      "unsub",
                      "custom",
                      "invalid-sender",
                      "invalid",
                      "test-mode-limit",
                      "unsigned",
                      "rule"
                    ]
                  },
                  "_id": {
                    "type": "string",
                    "description": "the message's unique id"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/messages/search": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "search",
          "methodNameSnake": "search"
        },
        "summary": "Search messages by date",
        "description": "Search recently sent messages and optionally narrow by date range, tags, senders, and API keys. If no date range is specified, results within the last 7 days are returned. This method may be called up to 20 times per minute. If you need the data more often, you can use /messages/info.json to get the information for a single message, or webhooks to push activity to your own application for querying.",
        "operationId": "postMessagesSearch",
        "tags": ["messages"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "query": {
                  "type": "string",
                  "description": "search terms to find matching messages"
                },
                "date_from": {
                  "type": "string",
                  "description": "start date",
                  "format": "date-time"
                },
                "date_to": {
                  "type": "string",
                  "description": "end date",
                  "format": "date-time"
                },
                "tags": {
                  "type": "array",
                  "description": "an array of tag names to narrow the search to, will return messages that contain ANY of the tags",
                  "items": {
                    "type": "string"
                  }
                },
                "senders": {
                  "type": "array",
                  "description": "an array of sender addresses to narrow the search to, will return messages sent by ANY of the senders",
                  "items": {
                    "type": "string",
                    "description": "a single sender email address",
                    "format": "email"
                  }
                },
                "api_keys": {
                  "type": "array",
                  "description": "an array of API keys to narrow the search to, will return messages sent by ANY of the keys",
                  "items": {
                    "type": "string",
                    "description": "a single API key"
                  }
                },
                "limit": {
                  "type": "integer",
                  "description": "the maximum number of results to return, defaults to 100, 1000 is the maximum",
                  "minimum": 100,
                  "maximum": 1000
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "an array of objects for each matching message",
              "items": {
                "type": "object",
                "description": "the information for a single matching message",
                "properties": {
                  "ts": {
                    "type": "integer",
                    "description": "the Unix timestamp from when this message was sent"
                  },
                  "_id": {
                    "type": "string",
                    "description": "the message's unique id"
                  },
                  "sender": {
                    "type": "string",
                    "format": "email",
                    "description": "the email address of the sender"
                  },
                  "template": {
                    "type": "string",
                    "description": "the unique name of the template used, if any"
                  },
                  "subject": {
                    "type": "string",
                    "description": "the message's subject line"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "the recipient email address"
                  },
                  "tags": {
                    "type": "array",
                    "description": "list of tags on this message",
                    "items": {
                      "type": "string",
                      "description": "individual tag on this message"
                    }
                  },
                  "opens": {
                    "type": "integer",
                    "description": "how many times has this message been opened"
                  },
                  "opens_detail": {
                    "type": "array",
                    "description": "list of individual opens for the message",
                    "items": {
                      "type": "object",
                      "description": "information on an individual open",
                      "properties": {
                        "ts": {
                          "type": "integer",
                          "description": "the unix timestamp from when the message was opened"
                        },
                        "ip": {
                          "type": "string",
                          "description": "the IP address that generated the open"
                        },
                        "location": {
                          "type": "string",
                          "description": "the approximate region and country that the opening IP is located"
                        },
                        "ua": {
                          "type": "string",
                          "description": "the email client or browser data of the open"
                        }
                      }
                    }
                  },
                  "clicks": {
                    "type": "integer",
                    "description": "how many times has a link been clicked in this message"
                  },
                  "clicks_detail": {
                    "type": "array",
                    "description": "list of individual clicks for the message",
                    "items": {
                      "type": "object",
                      "description": "information on an individual click",
                      "properties": {
                        "ts": {
                          "type": "integer",
                          "description": "the unix timestamp from when the message was clicked"
                        },
                        "url": {
                          "type": "string",
                          "description": "the URL that was clicked on"
                        },
                        "ip": {
                          "type": "string",
                          "description": "the IP address that generated the click"
                        },
                        "location": {
                          "type": "string",
                          "description": "the approximate region and country that the clicking IP is located"
                        },
                        "ua": {
                          "type": "string",
                          "description": "the email client or browser data of the click"
                        }
                      }
                    }
                  },
                  "state": {
                    "type": "string",
                    "description": "sending status of this message",
                    "enum": ["sent", "bounced", "rejected"]
                  },
                  "metadata": {
                    "type": "object",
                    "description": "any custom metadata provided when the message was sent"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/messages/search-time-series": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "searchTimeSeries",
          "methodNameSnake": "search_time_series"
        },
        "summary": "Search messages by hour",
        "description": "Search the content of recently sent messages and return the aggregated hourly stats for matching messages.",
        "operationId": "postMessagesSearchTimeSeries",
        "tags": ["messages"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "query": {
                  "type": "string",
                  "description": "the search terms to find matching messages for"
                },
                "date_from": {
                  "type": "string",
                  "description": "start date",
                  "format": "date-time"
                },
                "date_to": {
                  "type": "string",
                  "description": "end date",
                  "format": "date-time"
                },
                "tags": {
                  "type": "array",
                  "description": "an array of tag names to narrow the search to, will return messages that contain ANY of the tags",
                  "items": {
                    "type": "string",
                    "description": "a single tag name"
                  }
                },
                "senders": {
                  "type": "array",
                  "description": "an array of sender addresses to narrow the search to, will return messages sent by ANY of the senders",
                  "items": {
                    "type": "string",
                    "description": "a single sender email address"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "the array of history information",
              "items": {
                "type": "object",
                "description": "the stats for a single hour",
                "properties": {
                  "time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the hour as a UTC date string in YYYY-MM-DD HH:MM:SS format"
                  },
                  "sent": {
                    "type": "integer",
                    "description": "the number of emails that were sent during the hour"
                  },
                  "hard_bounces": {
                    "type": "integer",
                    "description": "the number of emails that hard bounced during the hour"
                  },
                  "soft_bounces": {
                    "type": "integer",
                    "description": "the number of emails that soft bounced during the hour"
                  },
                  "rejects": {
                    "type": "integer",
                    "description": "the number of emails that were rejected during the hour"
                  },
                  "complaints": {
                    "type": "integer",
                    "description": "the number of spam complaints received during the hour"
                  },
                  "unsubs": {
                    "type": "integer",
                    "description": "the number of unsubscribes received during the hour"
                  },
                  "opens": {
                    "type": "integer",
                    "description": "the number of emails opened during the hour"
                  },
                  "unique_opens": {
                    "type": "integer",
                    "description": "the number of unique opens generated by messages sent during the hour"
                  },
                  "clicks": {
                    "type": "integer",
                    "description": "the number of tracked URLs clicked during the hour"
                  },
                  "unique_clicks": {
                    "type": "integer",
                    "description": "the number of unique clicks generated by messages sent during the hour"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/messages/info": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "info",
          "methodNameSnake": "info"
        },
        "summary": "Get message info",
        "description": "Get the information for a single recently sent message.",
        "operationId": "postMessagesInfo",
        "tags": ["messages"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "id"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "id": {
                  "type": "string",
                  "description": "the unique id of the message to get - passed as the \"_id\" field in webhooks, send calls, or search calls"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the information for the message",
              "properties": {
                "ts": {
                  "type": "integer",
                  "description": "the Unix timestamp from when this message was sent"
                },
                "_id": {
                  "type": "string",
                  "description": "the message's unique id"
                },
                "sender": {
                  "type": "string",
                  "format": "email",
                  "description": "the email address of the sender"
                },
                "template": {
                  "type": "string",
                  "description": "the unique name of the template used, if any"
                },
                "subject": {
                  "type": "string",
                  "description": "the message's subject line"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "the recipient email address"
                },
                "tags": {
                  "type": "array",
                  "description": "list of tags on this message",
                  "items": {
                    "type": "string",
                    "description": "individual tag on this message"
                  }
                },
                "opens": {
                  "type": "integer",
                  "description": "how many times has this message been opened"
                },
                "opens_detail": {
                  "type": "array",
                  "description": "list of individual opens for the message",
                  "items": {
                    "type": "object",
                    "description": "information on an individual open",
                    "properties": {
                      "ts": {
                        "type": "integer",
                        "description": "the unix timestamp from when the message was opened"
                      },
                      "ip": {
                        "type": "string",
                        "description": "the IP address that generated the open"
                      },
                      "location": {
                        "type": "string",
                        "description": "the approximate region and country that the opening IP is located"
                      },
                      "ua": {
                        "type": "string",
                        "description": "the email client or browser data of the open"
                      }
                    }
                  }
                },
                "clicks": {
                  "type": "integer",
                  "description": "how many times has a link been clicked in this message"
                },
                "clicks_detail": {
                  "type": "array",
                  "description": "list of individual clicks for the message",
                  "items": {
                    "type": "object",
                    "description": "information on an individual click",
                    "properties": {
                      "ts": {
                        "type": "integer",
                        "description": "the unix timestamp from when the message was clicked"
                      },
                      "url": {
                        "type": "string",
                        "description": "the URL that was clicked on"
                      },
                      "ip": {
                        "type": "string",
                        "description": "the IP address that generated the click"
                      },
                      "location": {
                        "type": "string",
                        "description": "the approximate region and country that the clicking IP is located"
                      },
                      "ua": {
                        "type": "string",
                        "description": "the email client or browser data of the click"
                      }
                    }
                  }
                },
                "state": {
                  "type": "string",
                  "description": "sending status of this message",
                  "enum": ["sent", "bounced", "rejected"]
                },
                "metadata": {
                  "type": "object",
                  "description": "any custom metadata provided when the message was sent"
                },
                "smtp_events": {
                  "type": "array",
                  "description": "a log of up to 3 smtp events for the message",
                  "items": {
                    "type": "object",
                    "description": "information about a specific smtp event",
                    "properties": {
                      "ts": {
                        "type": "integer",
                        "description": "the Unix timestamp when the event occured"
                      },
                      "type": {
                        "type": "string",
                        "description": "the message's state as a result of this event"
                      },
                      "diag": {
                        "type": "string",
                        "description": "the SMTP response from the recipient's server"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/messages/content": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "content",
          "methodNameSnake": "content"
        },
        "summary": "Get message content",
        "description": "Get the full content of a recently sent message.",
        "operationId": "postMessagesContent",
        "tags": ["messages"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "id"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "id": {
                  "type": "string",
                  "description": "the unique id of the message to get - passed as the \"_id\" field in webhooks, send calls, or search calls"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the content of the message",
              "properties": {
                "ts": {
                  "type": "integer",
                  "description": "the Unix timestamp from when this message was sent"
                },
                "_id": {
                  "type": "string",
                  "description": "the message's unique id"
                },
                "from_email": {
                  "type": "string",
                  "format": "email",
                  "description": "the email address of the sender"
                },
                "from_name": {
                  "type": "string",
                  "description": "the alias of the sender (if any)"
                },
                "subject": {
                  "type": "string",
                  "description": "the message's subject line"
                },
                "to": {
                  "type": "object",
                  "description": "the message recipient's information",
                  "properties": {
                    "email": {
                      "type": "string",
                      "format": "email",
                      "description": "the email address of the recipient"
                    },
                    "name": {
                      "type": "string",
                      "description": "the alias of the recipient (if any)"
                    }
                  }
                },
                "tags": {
                  "type": "array",
                  "description": "list of tags on this message",
                  "items": {
                    "type": "string",
                    "description": "individual tag on this message"
                  }
                },
                "headers": {
                  "type": "object",
                  "description": "the key-value pairs of the custom MIME headers for the message's main document"
                },
                "text": {
                  "type": "string",
                  "description": "the text part of the message, if any"
                },
                "html": {
                  "type": "string",
                  "description": "the HTML part of the message, if any"
                },
                "attachments": {
                  "type": "array",
                  "description": "an array of any attachments that can be found in the message",
                  "items": {
                    "type": "object",
                    "description": "information about an individual attachment",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "the file name of the attachment"
                      },
                      "type": {
                        "type": "string",
                        "description": "the MIME type of the attachment"
                      },
                      "content": {
                        "type": "string",
                        "description": "the content of the attachment as a base64 encoded string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/messages/parse": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "parse",
          "methodNameSnake": "parse"
        },
        "summary": "Parse mime document",
        "description": "Parse the full MIME document for an email message, returning the content of the message broken into its constituent pieces.",
        "operationId": "postMessagesParse",
        "tags": ["messages"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "raw_message"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "raw_message": {
                  "type": "string",
                  "description": "the full MIME document of an email message"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the parsed message",
              "properties": {
                "subject": {
                  "type": "string",
                  "description": "the subject of the message"
                },
                "from_email": {
                  "type": "string",
                  "format": "email",
                  "description": "the email address of the sender"
                },
                "from_name": {
                  "type": "string",
                  "description": "the alias of the sender (if any)"
                },
                "to": {
                  "type": "array",
                  "description": "an array of any recipients in the message",
                  "items": {
                    "type": "object",
                    "description": "the information on a single recipient",
                    "properties": {
                      "email": {
                        "type": "string",
                        "description": "the email address of the recipient"
                      },
                      "name": {
                        "type": "string",
                        "description": "the alias of the recipient (if any)"
                      }
                    }
                  }
                },
                "headers": {
                  "type": "object",
                  "description": "the key-value pairs of the MIME headers for the message's main document"
                },
                "text": {
                  "type": "string",
                  "description": "the text part of the message, if any"
                },
                "html": {
                  "type": "string",
                  "description": "the HTML part of the message, if any"
                },
                "attachments": {
                  "type": "array",
                  "description": "an array of any attachments that can be found in the message",
                  "items": {
                    "type": "object",
                    "description": "information about an individual attachment",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "the file name of the attachment"
                      },
                      "type": {
                        "type": "string",
                        "description": "the MIME type of the attachment"
                      },
                      "binary": {
                        "type": "boolean",
                        "description": "if this is set to true, the attachment is not pure-text, and the content will be base64 encoded"
                      },
                      "content": {
                        "type": "string",
                        "description": "the content of the attachment as a base64 encoded string"
                      }
                    }
                  }
                },
                "images": {
                  "type": "array",
                  "description": "an array of any embedded images that can be found in the message",
                  "items": {
                    "type": "object",
                    "description": "information about an individual image",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "the Content-ID of the embedded image"
                      },
                      "type": {
                        "type": "string",
                        "description": "the MIME type of the image"
                      },
                      "content": {
                        "type": "string",
                        "description": "the content of the image as a base64 encoded string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/messages/send-raw": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "sendRaw",
          "methodNameSnake": "send_raw"
        },
        "summary": "Send mime document",
        "description": "Take a raw MIME document for a message, and send it exactly as if it were sent through the Transactional API's SMTP servers.",
        "operationId": "postMessagesSendRaw",
        "tags": ["messages"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "raw_message"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "raw_message": {
                  "type": "string",
                  "description": "the full MIME document of an email message"
                },
                "from_email": {
                  "type": "string",
                  "description": "optionally define the sender address - otherwise we'll use the address found in the provided headers",
                  "format": "email"
                },
                "from_name": {
                  "type": "string",
                  "description": "optionally define the sender alias"
                },
                "to": {
                  "type": "array",
                  "description": "optionally define the recipient to receive the message - otherwise we'll use the To, Cc, and Bcc headers provided in the document",
                  "items": {
                    "type": "string",
                    "description": "the email address of the recipient"
                  }
                },
                "async": {
                  "type": "boolean",
                  "description": "enable a background sending mode that is optimized for bulk sending. In async mode, messages/sendRaw will immediately return a status of \"queued\" for every recipient. To handle rejections when sending in async mode, set up a webhook for the 'reject' event. Defaults to false for messages with no more than 10 recipients; messages with more than 10 recipients are always sent asynchronously, regardless of the value of async."
                },
                "ip_pool": {
                  "type": "string",
                  "description": "the name of the dedicated ip pool that should be used to send the message. If you do not have any dedicated IPs, this parameter has no effect. If you specify a pool that does not exist, your default pool will be used instead."
                },
                "send_at": {
                  "type": "string",
                  "description": "when this message should be sent as a UTC timestamp in YYYY-MM-DD HH:MM:SS format. If you specify a time in the past, the message will be sent immediately; for future dates, you're limited to one year from the date of scheduling.",
                  "format": "date-time"
                },
                "return_path_domain": {
                  "type": "string",
                  "description": "a custom domain to use for the messages's return-path"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "",
              "properties": {}
            }
          }
        },
        "deprecated": false
      }
    },
    "/messages/list-scheduled": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "listScheduled",
          "methodNameSnake": "list_scheduled"
        },
        "summary": "List scheduled emails",
        "description": "Queries your scheduled emails.",
        "operationId": "postMessagesListScheduled",
        "tags": ["messages"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "to": {
                  "type": "string",
                  "description": "an optional recipient address to restrict results to",
                  "format": "email"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "a list of up to 1000 scheduled emails",
              "items": {
                "type": "object",
                "description": "a scheduled email",
                "properties": {
                  "_id": {
                    "type": "string",
                    "description": "the scheduled message id"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the UTC timestamp when the message was created, in YYYY-MM-DD HH:MM:SS format"
                  },
                  "send_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the UTC timestamp when the message will be sent, in YYYY-MM-DD HH:MM:SS format"
                  },
                  "from_email": {
                    "type": "string",
                    "format": "email",
                    "description": "the email's sender address"
                  },
                  "to": {
                    "type": "string",
                    "format": "email",
                    "description": "the email's recipient"
                  },
                  "subject": {
                    "type": "string",
                    "description": "the email's subject"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/messages/cancel-scheduled": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "cancelScheduled",
          "methodNameSnake": "cancel_scheduled"
        },
        "summary": "Cancel scheduled email",
        "description": "Cancels a scheduled email.",
        "operationId": "postMessagesCancelScheduled",
        "tags": ["messages"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "id"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "id": {
                  "type": "string",
                  "description": "a scheduled email id, as returned by any of the messages/send calls or messages/list-scheduled"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "information about the scheduled email that was cancelled.",
              "items": {
                "type": "object",
                "description": "a scheduled email",
                "properties": {
                  "_id": {
                    "type": "string",
                    "description": "the scheduled message id"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the UTC timestamp when the message was created, in YYYY-MM-DD HH:MM:SS format"
                  },
                  "send_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the UTC timestamp when the message will be sent, in YYYY-MM-DD HH:MM:SS format"
                  },
                  "from_email": {
                    "type": "string",
                    "format": "email",
                    "description": "the email's sender address"
                  },
                  "to": {
                    "type": "string",
                    "format": "email",
                    "description": "the email's recipient"
                  },
                  "subject": {
                    "type": "string",
                    "description": "the email's subject"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/messages/reschedule": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "reschedule",
          "methodNameSnake": "reschedule"
        },
        "summary": "Reschedule email",
        "description": "Reschedules a scheduled email.",
        "operationId": "postMessagesReschedule",
        "tags": ["messages"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "id", "send_at"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "id": {
                  "type": "string",
                  "description": "a scheduled email id, as returned by any of the messages/send calls or messages/list-scheduled"
                },
                "send_at": {
                  "type": "string",
                  "description": "the new UTC timestamp when the message should sent. Mandrill can't time travel, so if you specify a time in past the message will be sent immediately; for future dates, you're limited to one year from the date of scheduling.",
                  "format": "date-time"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "information about the scheduled email that was rescheduled.",
              "items": {
                "type": "object",
                "description": "a scheduled email",
                "properties": {
                  "_id": {
                    "type": "string",
                    "description": "the scheduled message id"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the UTC timestamp when the message was created, in YYYY-MM-DD HH:MM:SS format"
                  },
                  "send_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the UTC timestamp when the message will be sent, in YYYY-MM-DD HH:MM:SS format"
                  },
                  "from_email": {
                    "type": "string",
                    "format": "email",
                    "description": "the email's sender address"
                  },
                  "to": {
                    "type": "string",
                    "format": "email",
                    "description": "the email's recipient"
                  },
                  "subject": {
                    "type": "string",
                    "description": "the email's subject"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/metadata/list": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "list",
          "methodNameSnake": "list"
        },
        "summary": "List metadata fields",
        "description": "Get the list of custom metadata fields indexed for the account.",
        "operationId": "postMetadataList",
        "tags": ["metadata"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "the custom metadata fields for the account",
              "items": {
                "type": "object",
                "description": "the individual custom metadata field info",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "the unique identifier of the metadata field to update"
                  },
                  "state": {
                    "type": "string",
                    "description": "the current state of the metadata field",
                    "enum": ["active", "delete", "index"]
                  },
                  "view_template": {
                    "type": "string",
                    "description": "Mustache template to control how the metadata is rendered in your activity log"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/metadata/add": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "add",
          "methodNameSnake": "add"
        },
        "summary": "Add metadata field",
        "description": "Add a new custom metadata field to be indexed for the account.",
        "operationId": "postMetadataAdd",
        "tags": ["metadata"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "name"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "name": {
                  "type": "string",
                  "description": "a unique identifier for the metadata field",
                  "maxLength": 64
                },
                "view_template": {
                  "type": "string",
                  "description": "Mustache template to control how the metadata is rendered in your activity log",
                  "maxLength": 1024
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the information saved about the new metadata field",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "the unique identifier of the metadata field to update"
                },
                "state": {
                  "type": "string",
                  "description": "the current state of the metadata field",
                  "enum": ["active", "delete", "index"]
                },
                "view_template": {
                  "type": "string",
                  "description": "Mustache template to control how the metadata is rendered in your activity log"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/metadata/update": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "update",
          "methodNameSnake": "update"
        },
        "summary": "Update metadata field",
        "description": "Update an existing custom metadata field.",
        "operationId": "postMetadataUpdate",
        "tags": ["metadata"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "name", "view_template"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "name": {
                  "type": "string",
                  "description": "the unique identifier of the metadata field to update"
                },
                "view_template": {
                  "type": "string",
                  "description": "Mustache template to control how the metadata is rendered in your activity log",
                  "maxLength": 1024
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the information for the updated metadata field",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "the unique identifier of the metadata field to update"
                },
                "state": {
                  "type": "string",
                  "description": "the current state of the metadata field",
                  "enum": ["active", "delete", "index"]
                },
                "view_template": {
                  "type": "string",
                  "description": "Mustache template to control how the metadata is rendered in your activity log"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/metadata/delete": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "delete",
          "methodNameSnake": "delete"
        },
        "summary": "Delete metadata field",
        "description": "Delete an existing custom metadata field. Deletion isn't instataneous, and /metadata/list will continue to return the field until the asynchronous deletion process is complete.",
        "operationId": "postMetadataDelete",
        "tags": ["metadata"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "name"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "name": {
                  "type": "string",
                  "description": "the unique identifier of the metadata field to update"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the information for the deleted metadata field",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "the unique identifier of the metadata field to update"
                },
                "state": {
                  "type": "string",
                  "description": "the current state of the metadata field",
                  "enum": ["active", "delete", "index"]
                },
                "view_template": {
                  "type": "string",
                  "description": "Mustache template to control how the metadata is rendered in your activity log"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/rejects/add": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "add",
          "methodNameSnake": "add"
        },
        "summary": "Add email to denylist",
        "description": "Adds an email to your email rejection denylist. Addresses that you add manually will never expire and there is no reputation penalty for removing them from your denylist. Attempting to denylist an address that has been added to the allowlist will have no effect.",
        "operationId": "postRejectsAdd",
        "tags": ["rejects"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "email"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "email": {
                  "type": "string",
                  "description": "an email address to block",
                  "format": "email"
                },
                "comment": {
                  "type": "string",
                  "description": "an optional comment describing the rejection"
                },
                "subaccount": {
                  "type": "string",
                  "description": "an optional unique identifier for the subaccount to limit the denylist entry",
                  "maxLength": 255
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "a status object containing the address and the result of the operation",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "the email address you provided"
                },
                "added": {
                  "type": "boolean",
                  "description": "whether the operation succeeded"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/rejects/list": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "list",
          "methodNameSnake": "list"
        },
        "summary": "List denylisted emails",
        "description": "Retrieves your email rejection denylist. You can provide an email address to limit the results. Returns up to 1000 results. By default, entries that have expired are excluded from the results; set include_expired to true to include them.",
        "operationId": "postRejectsList",
        "tags": ["rejects"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "email": {
                  "type": "string",
                  "description": "an optional email address to search by",
                  "format": "email"
                },
                "include_expired": {
                  "type": "boolean",
                  "description": "whether to include rejections that have already expired."
                },
                "subaccount": {
                  "type": "string",
                  "description": "an optional unique identifier for the subaccount to limit the denylist",
                  "maxLength": 255
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "Up to 1000 rejection entries",
              "items": {
                "type": "object",
                "description": "the information for each rejection  entry",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "the email that is blocked"
                  },
                  "reason": {
                    "type": "string",
                    "description": "the type of event (hard-bounce, soft-bounce, spam, unsub, custom) that caused this rejection"
                  },
                  "detail": {
                    "type": "string",
                    "description": "extended details about the event, such as the SMTP diagnostic for bounces or the comment for manually-created rejections"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "when the email was added to the denylist"
                  },
                  "last_event_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the timestamp of the most recent event that either created or renewed this rejection"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "when the denylist entry will expire (this may be in the past)"
                  },
                  "expired": {
                    "type": "boolean",
                    "description": "whether the denylist entry has expired"
                  },
                  "sender": {
                    "type": "object",
                    "description": "the sender that this denylist entry applies to, or null if none.",
                    "properties": {
                      "address": {
                        "type": "string",
                        "format": "email",
                        "description": "the sender's email address"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "the date and time that the sender was first seen by Mandrill as a UTC date string in YYYY-MM-DD HH:MM:SS format"
                      },
                      "sent": {
                        "type": "integer",
                        "description": "the total number of messages sent by this sender"
                      },
                      "hard_bounces": {
                        "type": "integer",
                        "description": "the total number of hard bounces by messages by this sender"
                      },
                      "soft_bounces": {
                        "type": "integer",
                        "description": "the total number of soft bounces by messages by this sender"
                      },
                      "rejects": {
                        "type": "integer",
                        "description": "the total number of rejected messages by this sender"
                      },
                      "complaints": {
                        "type": "integer",
                        "description": "the total number of spam complaints received for messages by this sender"
                      },
                      "unsubs": {
                        "type": "integer",
                        "description": "the total number of unsubscribe requests received for messages by this sender"
                      },
                      "opens": {
                        "type": "integer",
                        "description": "the total number of times messages by this sender have been opened"
                      },
                      "clicks": {
                        "type": "integer",
                        "description": "the total number of times tracked URLs in messages by this sender have been clicked"
                      },
                      "unique_opens": {
                        "type": "integer",
                        "description": "the number of unique opens for emails sent for this sender"
                      },
                      "unique_clicks": {
                        "type": "integer",
                        "description": "the number of unique clicks for emails sent for this sender"
                      }
                    }
                  },
                  "subaccount": {
                    "type": "string",
                    "description": "the subaccount that this denylist entry applies to, or null if none."
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/rejects/delete": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "delete",
          "methodNameSnake": "delete"
        },
        "summary": "Delete email from denylist",
        "description": "Deletes an email rejection. There is no limit to how many rejections you can remove from your denylist, but keep in mind that each deletion has an affect on your reputation.",
        "operationId": "postRejectsDelete",
        "tags": ["rejects"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "email"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "email": {
                  "type": "string",
                  "description": "an email address",
                  "format": "email"
                },
                "subaccount": {
                  "type": "string",
                  "description": "an optional unique identifier for the subaccount to limit the denylist deletion",
                  "maxLength": 255
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "a status object containing the address and whether the deletion succeeded.",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "the email address that was removed from the denylist"
                },
                "deleted": {
                  "type": "boolean",
                  "description": "whether the address was deleted successfully."
                },
                "subaccount": {
                  "type": "string",
                  "description": "the subaccount denylist that the address was removed from, if any"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/senders/list": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "list",
          "methodNameSnake": "list"
        },
        "summary": "List account senders",
        "description": "Return the senders that have tried to use this account.",
        "operationId": "postSendersList",
        "tags": ["senders"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "an array of sender data, one for each sending addresses used by the account",
              "items": {
                "type": "object",
                "description": "the information on each sending address in the account",
                "properties": {
                  "address": {
                    "type": "string",
                    "format": "email",
                    "description": "the sender's email address"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the date and time that the sender was first seen by Mandrill as a UTC date string in YYYY-MM-DD HH:MM:SS format"
                  },
                  "sent": {
                    "type": "integer",
                    "description": "the total number of messages sent by this sender"
                  },
                  "hard_bounces": {
                    "type": "integer",
                    "description": "the total number of hard bounces by messages by this sender"
                  },
                  "soft_bounces": {
                    "type": "integer",
                    "description": "the total number of soft bounces by messages by this sender"
                  },
                  "rejects": {
                    "type": "integer",
                    "description": "the total number of rejected messages by this sender"
                  },
                  "complaints": {
                    "type": "integer",
                    "description": "the total number of spam complaints received for messages by this sender"
                  },
                  "unsubs": {
                    "type": "integer",
                    "description": "the total number of unsubscribe requests received for messages by this sender"
                  },
                  "opens": {
                    "type": "integer",
                    "description": "the total number of times messages by this sender have been opened"
                  },
                  "clicks": {
                    "type": "integer",
                    "description": "the total number of times tracked URLs in messages by this sender have been clicked"
                  },
                  "unique_opens": {
                    "type": "integer",
                    "description": "the number of unique opens for emails sent for this sender"
                  },
                  "unique_clicks": {
                    "type": "integer",
                    "description": "the number of unique clicks for emails sent for this sender"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/senders/domains": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "domains",
          "methodNameSnake": "domains"
        },
        "summary": "List sender domains",
        "description": "Returns the sender domains that have been added to this account.",
        "operationId": "postSendersDomains",
        "tags": ["senders"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "an array of sender domain data, one for each sending domain used by the account",
              "items": {
                "type": "object",
                "description": "the information on each sending domain for the account",
                "properties": {
                  "domain": {
                    "type": "string",
                    "description": "the sender domain name"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the date and time that the sending domain was first seen as a UTC string in YYYY-MM-DD HH:MM:SS format"
                  },
                  "last_tested_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "when the domain's DNS settings were last tested as a UTC string in YYYY-MM-DD HH:MM:SS format"
                  },
                  "spf": {
                    "type": "object",
                    "description": "details about the domain's SPF record",
                    "properties": {
                      "valid": {
                        "type": "boolean",
                        "description": "whether the domain's SPF record is valid for use with Mandrill"
                      },
                      "valid_after": {
                        "type": "string",
                        "format": "date-time",
                        "description": "when the domain's SPF record will be considered valid for use with Mandrill as a UTC string in YYYY-MM-DD HH:MM:SS format. If set, this indicates that the record is valid now, but was previously invalid, and Mandrill will wait until the record's TTL elapses to start using it."
                      },
                      "error": {
                        "type": "string",
                        "description": "an error describing the spf record, or null if the record is correct"
                      }
                    }
                  },
                  "dkim": {
                    "type": "object",
                    "description": "details about the domain's DKIM record",
                    "properties": {
                      "valid": {
                        "type": "boolean",
                        "description": "whether the domain's DKIM record is valid for use with Mandrill"
                      },
                      "valid_after": {
                        "type": "string",
                        "format": "date-time",
                        "description": "when the domain's DKIM record will be considered valid for use with Mandrill as a UTC string in YYYY-MM-DD HH:MM:SS format. If set, this indicates that the record is valid now, but was previously invalid, and Mandrill will wait until the record's TTL elapses to start using it."
                      },
                      "error": {
                        "type": "string",
                        "description": "an error describing the DKIM record, or null if the record is correct"
                      }
                    }
                  },
                  "verified_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "if the domain has been verified, this indicates when that verification occurred as a UTC string in YYYY-MM-DD HH:MM:SS format"
                  },
                  "valid_signing": {
                    "type": "boolean",
                    "description": "whether this domain can be used to authenticate mail, either for itself or as a custom signing domain. If this is false but spf and dkim are both valid, you will need to verify the domain before using it to authenticate mail"
                  },
                  "verify_txt_key": {
                    "type": "string",
                    "description": "a unique key used to verify a domain by adding a TXT record. Append this key to 'mandrill_verify.' and add it to your domain's TXT records to verify"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/senders/add-domain": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "addDomain",
          "methodNameSnake": "add_domain"
        },
        "summary": "Add sender domain",
        "description": "Adds a sender domain to your account. Sender domains are added automatically as you send, but you can use this call to add them ahead of time.",
        "operationId": "postSendersAddDomain",
        "tags": ["senders"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "domain"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "domain": {
                  "type": "string",
                  "description": "a domain name"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "information about the domain",
              "properties": {
                "domain": {
                  "type": "string",
                  "description": "the sender domain name"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the sending domain was first seen as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "last_tested_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "when the domain's DNS settings were last tested as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "spf": {
                  "type": "object",
                  "description": "details about the domain's SPF record",
                  "properties": {
                    "valid": {
                      "type": "boolean",
                      "description": "whether the domain's SPF record is valid for use with Mandrill"
                    },
                    "valid_after": {
                      "type": "string",
                      "format": "date-time",
                      "description": "when the domain's SPF record will be considered valid for use with Mandrill as a UTC string in YYYY-MM-DD HH:MM:SS format. If set, this indicates that the record is valid now, but was previously invalid, and Mandrill will wait until the record's TTL elapses to start using it."
                    },
                    "error": {
                      "type": "string",
                      "description": "an error describing the spf record, or null if the record is correct"
                    }
                  }
                },
                "dkim": {
                  "type": "object",
                  "description": "details about the domain's DKIM record",
                  "properties": {
                    "valid": {
                      "type": "boolean",
                      "description": "whether the domain's DKIM record is valid for use with Mandrill"
                    },
                    "valid_after": {
                      "type": "string",
                      "format": "date-time",
                      "description": "when the domain's DKIM record will be considered valid for use with Mandrill as a UTC string in YYYY-MM-DD HH:MM:SS format. If set, this indicates that the record is valid now, but was previously invalid, and Mandrill will wait until the record's TTL elapses to start using it."
                    },
                    "error": {
                      "type": "string",
                      "description": "an error describing the DKIM record, or null if the record is correct"
                    }
                  }
                },
                "verified_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "if the domain has been verified, this indicates when that verification occurred as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "valid_signing": {
                  "type": "boolean",
                  "description": "whether this domain can be used to authenticate mail, either for itself or as a custom signing domain. If this is false but spf and dkim are both valid, you will need to verify the domain before using it to authenticate mail"
                },
                "verify_txt_key": {
                  "type": "string",
                  "description": "a unique key used to verify a domain by adding a TXT record. Append this key to 'mandrill_verify.' and add it to your domain's TXT records to verify"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/senders/check-domain": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "checkDomain",
          "methodNameSnake": "check_domain"
        },
        "summary": "Check domain settings",
        "description": "Checks the SPF and DKIM settings for a domain, as well the domain verification. If you haven't already added this domain to your account, it will be added automatically.",
        "operationId": "postSendersCheckDomain",
        "tags": ["senders"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "domain"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "domain": {
                  "type": "string",
                  "description": "a domain name"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "information about the sender domain",
              "properties": {
                "domain": {
                  "type": "string",
                  "description": "the sender domain name"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the sending domain was first seen as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "last_tested_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "when the domain's DNS settings were last tested as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "spf": {
                  "type": "object",
                  "description": "details about the domain's SPF record",
                  "properties": {
                    "valid": {
                      "type": "boolean",
                      "description": "whether the domain's SPF record is valid for use with Mandrill"
                    },
                    "valid_after": {
                      "type": "string",
                      "format": "date-time",
                      "description": "when the domain's SPF record will be considered valid for use with Mandrill as a UTC string in YYYY-MM-DD HH:MM:SS format. If set, this indicates that the record is valid now, but was previously invalid, and Mandrill will wait until the record's TTL elapses to start using it."
                    },
                    "error": {
                      "type": "string",
                      "description": "an error describing the spf record, or null if the record is correct"
                    }
                  }
                },
                "dkim": {
                  "type": "object",
                  "description": "details about the domain's DKIM record",
                  "properties": {
                    "valid": {
                      "type": "boolean",
                      "description": "whether the domain's DKIM record is valid for use with Mandrill"
                    },
                    "valid_after": {
                      "type": "string",
                      "format": "date-time",
                      "description": "when the domain's DKIM record will be considered valid for use with Mandrill as a UTC string in YYYY-MM-DD HH:MM:SS format. If set, this indicates that the record is valid now, but was previously invalid, and Mandrill will wait until the record's TTL elapses to start using it."
                    },
                    "error": {
                      "type": "string",
                      "description": "an error describing the DKIM record, or null if the record is correct"
                    }
                  }
                },
                "verified_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "if the domain has been verified, this indicates when that verification occurred as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "valid_signing": {
                  "type": "boolean",
                  "description": "whether this domain can be used to authenticate mail, either for itself or as a custom signing domain. If this is false but spf and dkim are both valid, you will need to verify the domain before using it to authenticate mail"
                },
                "verify_txt_key": {
                  "type": "string",
                  "description": "a unique key used to verify a domain by adding a TXT record. Append this key to 'mandrill_verify.' and add it to your domain's TXT records to verify"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/senders/verify-domain": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "verifyDomain",
          "methodNameSnake": "verify_domain"
        },
        "summary": "Verify domain",
        "description": "Sends a verification email in order to verify ownership of a domain. Domain verification is a required step to confirm ownership of a domain. Once a domain has been verified in a Transactional API account, other accounts may not have their messages signed by that domain unless they also verify the domain. This prevents other Transactional API accounts from sending mail signed by your domain.",
        "operationId": "postSendersVerifyDomain",
        "tags": ["senders"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "domain", "mailbox"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "domain": {
                  "type": "string",
                  "description": "domain name at which you can receive email"
                },
                "mailbox": {
                  "type": "string",
                  "description": "a mailbox at the domain where the verification email should be sent"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "information about the verification that was sent",
              "properties": {
                "status": {
                  "type": "string",
                  "description": "\"sent\" indicates that the verification has been sent, \"already_verified\" indicates that the domain has already been verified with your account"
                },
                "domain": {
                  "type": "string",
                  "description": "the domain name you provided"
                },
                "email": {
                  "type": "string",
                  "format": "email",
                  "description": "the email address the verification email was sent to"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/senders/info": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "info",
          "methodNameSnake": "info"
        },
        "summary": "Get sender info",
        "description": "Return more detailed information about a single sender, including aggregates of recent stats.",
        "operationId": "postSendersInfo",
        "tags": ["senders"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "address"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "address": {
                  "type": "string",
                  "description": "the email address of the sender",
                  "format": "email"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the detailed information on the sender",
              "properties": {
                "address": {
                  "type": "string",
                  "format": "email",
                  "description": "the sender's email address"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the sender was first seen by Mandrill as a UTC date string in YYYY-MM-DD HH:MM:SS format"
                },
                "sent": {
                  "type": "integer",
                  "description": "the total number of messages sent by this sender"
                },
                "hard_bounces": {
                  "type": "integer",
                  "description": "the total number of hard bounces by messages by this sender"
                },
                "soft_bounces": {
                  "type": "integer",
                  "description": "the total number of soft bounces by messages by this sender"
                },
                "rejects": {
                  "type": "integer",
                  "description": "the total number of rejected messages by this sender"
                },
                "complaints": {
                  "type": "integer",
                  "description": "the total number of spam complaints received for messages by this sender"
                },
                "unsubs": {
                  "type": "integer",
                  "description": "the total number of unsubscribe requests received for messages by this sender"
                },
                "opens": {
                  "type": "integer",
                  "description": "the total number of times messages by this sender have been opened"
                },
                "clicks": {
                  "type": "integer",
                  "description": "the total number of times tracked URLs in messages by this sender have been clicked"
                },
                "stats": {
                  "type": "object",
                  "description": "an aggregate summary of the sender's sending stats",
                  "properties": {
                    "today": {
                      "type": "object",
                      "description": "stats for this sender so far today",
                      "properties": {
                        "sent": {
                          "type": "integer",
                          "description": "the number of emails sent for this sender so far today"
                        },
                        "hard_bounces": {
                          "type": "integer",
                          "description": "the number of emails hard bounced for this sender so far today"
                        },
                        "soft_bounces": {
                          "type": "integer",
                          "description": "the number of emails soft bounced for this sender so far today"
                        },
                        "rejects": {
                          "type": "integer",
                          "description": "the number of emails rejected for sending this sender so far today"
                        },
                        "complaints": {
                          "type": "integer",
                          "description": "the number of spam complaints for this sender so far today"
                        },
                        "unsubs": {
                          "type": "integer",
                          "description": "the number of unsubscribes for this sender so far today"
                        },
                        "opens": {
                          "type": "integer",
                          "description": "the number of times emails have been opened for this sender so far today"
                        },
                        "unique_opens": {
                          "type": "integer",
                          "description": "the number of unique opens for emails sent for this sender so far today"
                        },
                        "clicks": {
                          "type": "integer",
                          "description": "the number of URLs that have been clicked for this sender so far today"
                        },
                        "unique_clicks": {
                          "type": "integer",
                          "description": "the number of unique clicks for emails sent for this sender so far today"
                        }
                      }
                    },
                    "last_7_days": {
                      "type": "object",
                      "description": "stats for this sender in the last 7 days",
                      "properties": {
                        "sent": {
                          "type": "integer",
                          "description": "the number of emails sent for this sender in the last 7 days"
                        },
                        "hard_bounces": {
                          "type": "integer",
                          "description": "the number of emails hard bounced for this sender in the last 7 days"
                        },
                        "soft_bounces": {
                          "type": "integer",
                          "description": "the number of emails soft bounced for this sender in the last 7 days"
                        },
                        "rejects": {
                          "type": "integer",
                          "description": "the number of emails rejected for sending this sender in the last 7 days"
                        },
                        "complaints": {
                          "type": "integer",
                          "description": "the number of spam complaints for this sender in the last 7 days"
                        },
                        "unsubs": {
                          "type": "integer",
                          "description": "the number of unsubscribes for this sender in the last 7 days"
                        },
                        "opens": {
                          "type": "integer",
                          "description": "the number of times emails have been opened for this sender in the last 7 days"
                        },
                        "unique_opens": {
                          "type": "integer",
                          "description": "the number of unique opens for emails sent for this sender in the last 7 days"
                        },
                        "clicks": {
                          "type": "integer",
                          "description": "the number of URLs that have been clicked for this sender in the last 7 days"
                        },
                        "unique_clicks": {
                          "type": "integer",
                          "description": "the number of unique clicks for emails sent for this sender in the last 7 days"
                        }
                      }
                    },
                    "last_30_days": {
                      "type": "object",
                      "description": "stats for this sender in the last 30 days",
                      "properties": {
                        "sent": {
                          "type": "integer",
                          "description": "the number of emails sent for this sender in the last 30 days"
                        },
                        "hard_bounces": {
                          "type": "integer",
                          "description": "the number of emails hard bounced for this sender in the last 30 days"
                        },
                        "soft_bounces": {
                          "type": "integer",
                          "description": "the number of emails soft bounced for this sender in the last 30 days"
                        },
                        "rejects": {
                          "type": "integer",
                          "description": "the number of emails rejected for sending this sender in the last 30 days"
                        },
                        "complaints": {
                          "type": "integer",
                          "description": "the number of spam complaints for this sender in the last 30 days"
                        },
                        "unsubs": {
                          "type": "integer",
                          "description": "the number of unsubscribes for this sender in the last 30 days"
                        },
                        "opens": {
                          "type": "integer",
                          "description": "the number of times emails have been opened for this sender in the last 30 days"
                        },
                        "unique_opens": {
                          "type": "integer",
                          "description": "the number of unique opens for emails sent for this sender in the last 30 days"
                        },
                        "clicks": {
                          "type": "integer",
                          "description": "the number of URLs that have been clicked for this sender in the last 30 days"
                        },
                        "unique_clicks": {
                          "type": "integer",
                          "description": "the number of unique clicks for emails sent for this sender in the last 30 days"
                        }
                      }
                    },
                    "last_60_days": {
                      "type": "object",
                      "description": "stats for this sender in the last 60 days",
                      "properties": {
                        "sent": {
                          "type": "integer",
                          "description": "the number of emails sent for this sender in the last 60 days"
                        },
                        "hard_bounces": {
                          "type": "integer",
                          "description": "the number of emails hard bounced for this sender in the last 60 days"
                        },
                        "soft_bounces": {
                          "type": "integer",
                          "description": "the number of emails soft bounced for this sender in the last 60 days"
                        },
                        "rejects": {
                          "type": "integer",
                          "description": "the number of emails rejected for sending this sender in the last 60 days"
                        },
                        "complaints": {
                          "type": "integer",
                          "description": "the number of spam complaints for this sender in the last 60 days"
                        },
                        "unsubs": {
                          "type": "integer",
                          "description": "the number of unsubscribes for this sender in the last 60 days"
                        },
                        "opens": {
                          "type": "integer",
                          "description": "the number of times emails have been opened for this sender in the last 60 days"
                        },
                        "unique_opens": {
                          "type": "integer",
                          "description": "the number of unique opens for emails sent for this sender in the last 60 days"
                        },
                        "clicks": {
                          "type": "integer",
                          "description": "the number of URLs that have been clicked for this sender in the last 60 days"
                        },
                        "unique_clicks": {
                          "type": "integer",
                          "description": "the number of unique clicks for emails sent for this sender in the last 60 days"
                        }
                      }
                    },
                    "last_90_days": {
                      "type": "object",
                      "description": "stats for this sender in the last 90 days",
                      "properties": {
                        "sent": {
                          "type": "integer",
                          "description": "the number of emails sent for this sender in the last 90 days"
                        },
                        "hard_bounces": {
                          "type": "integer",
                          "description": "the number of emails hard bounced for this sender in the last 90 days"
                        },
                        "soft_bounces": {
                          "type": "integer",
                          "description": "the number of emails soft bounced for this sender in the last 90 days"
                        },
                        "rejects": {
                          "type": "integer",
                          "description": "the number of emails rejected for sending this sender in the last 90 days"
                        },
                        "complaints": {
                          "type": "integer",
                          "description": "the number of spam complaints for this sender in the last 90 days"
                        },
                        "unsubs": {
                          "type": "integer",
                          "description": "the number of unsubscribes for this sender in the last 90 days"
                        },
                        "opens": {
                          "type": "integer",
                          "description": "the number of times emails have been opened for this sender in the last 90 days"
                        },
                        "unique_opens": {
                          "type": "integer",
                          "description": "the number of unique opens for emails sent for this sender in the last 90 days"
                        },
                        "clicks": {
                          "type": "integer",
                          "description": "the number of URLs that have been clicked for this sender in the last 90 days"
                        },
                        "unique_clicks": {
                          "type": "integer",
                          "description": "the number of unique clicks for emails sent for this sender in the last 90 days"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/senders/time-series": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "timeSeries",
          "methodNameSnake": "time_series"
        },
        "summary": "View sender history",
        "description": "Return the recent history (hourly stats for the last 30 days) for a sender.",
        "operationId": "postSendersTimeSeries",
        "tags": ["senders"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "address"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "address": {
                  "type": "string",
                  "description": "the email address of the sender",
                  "format": "email"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "the array of history information",
              "items": {
                "type": "object",
                "description": "the stats for a single hour",
                "properties": {
                  "time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the hour as a UTC date string in YYYY-MM-DD HH:MM:SS format"
                  },
                  "sent": {
                    "type": "integer",
                    "description": "the number of emails that were sent during the hour"
                  },
                  "hard_bounces": {
                    "type": "integer",
                    "description": "the number of emails that hard bounced during the hour"
                  },
                  "soft_bounces": {
                    "type": "integer",
                    "description": "the number of emails that soft bounced during the hour"
                  },
                  "rejects": {
                    "type": "integer",
                    "description": "the number of emails that were rejected during the hour"
                  },
                  "complaints": {
                    "type": "integer",
                    "description": "the number of spam complaints received during the hour"
                  },
                  "opens": {
                    "type": "integer",
                    "description": "the number of emails opened during the hour"
                  },
                  "unique_opens": {
                    "type": "integer",
                    "description": "the number of unique opens generated by messages sent during the hour"
                  },
                  "clicks": {
                    "type": "integer",
                    "description": "the number of tracked URLs clicked during the hour"
                  },
                  "unique_clicks": {
                    "type": "integer",
                    "description": "the number of unique clicks generated by messages sent during the hour"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/subaccounts/list": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "list",
          "methodNameSnake": "list"
        },
        "summary": "List subaccounts",
        "description": "Get the list of subaccounts defined for the account, optionally filtered by a prefix.",
        "operationId": "postSubaccountsList",
        "tags": ["subaccounts"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "q": {
                  "type": "string",
                  "description": "an optional prefix to filter the subaccounts' ids and names"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "the subaccounts for the account, up to a maximum of 1,000",
              "items": {
                "type": "object",
                "description": "the individual subaccount info",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "a unique indentifier for the subaccount"
                  },
                  "name": {
                    "type": "string",
                    "description": "an optional display name for the subaccount"
                  },
                  "custom_quota": {
                    "type": "integer",
                    "description": "an optional manual hourly quota for the subaccount. If not specified, the hourly quota will be managed based on reputation"
                  },
                  "status": {
                    "type": "string",
                    "description": "the current sending status of the subaccount",
                    "enum": ["active", "paused"]
                  },
                  "reputation": {
                    "type": "integer",
                    "description": "the subaccount's current reputation on a scale from 0 to 100",
                    "minimum": 0,
                    "maximum": 100
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the date and time that the subaccount was created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                  },
                  "first_sent_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the date and time that the subaccount first sent as a UTC string in YYYY-MM-DD HH:MM:SS format"
                  },
                  "sent_weekly": {
                    "type": "integer",
                    "description": "the number of emails the subaccount has sent so far this week (weeks start on midnight Monday, UTC)"
                  },
                  "sent_monthly": {
                    "type": "integer",
                    "description": "the number of emails the subaccount has sent so far this month (months start on midnight of the 1st, UTC)"
                  },
                  "sent_total": {
                    "type": "integer",
                    "description": "the number of emails the subaccount has sent since it was created"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/subaccounts/add": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "add",
          "methodNameSnake": "add"
        },
        "summary": "Add subaccount",
        "description": "Add a new subaccount.",
        "operationId": "postSubaccountsAdd",
        "tags": ["subaccounts"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "id"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "id": {
                  "type": "string",
                  "description": "a unique identifier for the subaccount to be used in sending calls",
                  "maxLength": 255
                },
                "name": {
                  "type": "string",
                  "description": "an optional display name to further identify the subaccount",
                  "maxLength": 1024
                },
                "notes": {
                  "type": "string",
                  "description": "optional extra text to associate with the subaccount"
                },
                "custom_quota": {
                  "type": "integer",
                  "description": "an optional manual hourly quota for the subaccount. If not specified, Mandrill will manage this based on reputation",
                  "minimum": 0
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the information saved about the new subaccount",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "a unique indentifier for the subaccount"
                },
                "name": {
                  "type": "string",
                  "description": "an optional display name for the subaccount"
                },
                "custom_quota": {
                  "type": "integer",
                  "description": "an optional manual hourly quota for the subaccount. If not specified, the hourly quota will be managed based on reputation"
                },
                "status": {
                  "type": "string",
                  "description": "the current sending status of the subaccount",
                  "enum": ["active", "paused"]
                },
                "reputation": {
                  "type": "integer",
                  "description": "the subaccount's current reputation on a scale from 0 to 100",
                  "minimum": 0,
                  "maximum": 100
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the subaccount was created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "first_sent_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the subaccount first sent as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "sent_weekly": {
                  "type": "integer",
                  "description": "the number of emails the subaccount has sent so far this week (weeks start on midnight Monday, UTC)"
                },
                "sent_monthly": {
                  "type": "integer",
                  "description": "the number of emails the subaccount has sent so far this month (months start on midnight of the 1st, UTC)"
                },
                "sent_total": {
                  "type": "integer",
                  "description": "the number of emails the subaccount has sent since it was created"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/subaccounts/info": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "info",
          "methodNameSnake": "info"
        },
        "summary": "Get subaccount info",
        "description": "Given the ID of an existing subaccount, return the data about it.",
        "operationId": "postSubaccountsInfo",
        "tags": ["subaccounts"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "id"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "id": {
                  "type": "string",
                  "description": "the unique identifier of the subaccount to query"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the information about the subaccount",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "a unique indentifier for the subaccount"
                },
                "name": {
                  "type": "string",
                  "description": "an optional display name for the subaccount"
                },
                "notes": {
                  "type": "string",
                  "description": "optional extra text to associate with the subaccount"
                },
                "custom_quota": {
                  "type": "integer",
                  "description": "an optional manual hourly quota for the subaccount. If not specified, the hourly quota will be managed based on reputation"
                },
                "status": {
                  "type": "string",
                  "description": "the current sending status of the subaccount",
                  "enum": ["active", "paused"]
                },
                "reputation": {
                  "type": "integer",
                  "description": "the subaccount's current reputation on a scale from 0 to 100",
                  "minimum": 0,
                  "maximum": 100
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the subaccount was created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "first_sent_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the subaccount first sent as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "sent_weekly": {
                  "type": "integer",
                  "description": "the number of emails the subaccount has sent so far this week (weeks start on midnight Monday, UTC)"
                },
                "sent_monthly": {
                  "type": "integer",
                  "description": "the number of emails the subaccount has sent so far this month (months start on midnight of the 1st, UTC)"
                },
                "sent_total": {
                  "type": "integer",
                  "description": "the number of emails the subaccount has sent since it was created"
                },
                "sent_hourly": {
                  "type": "integer",
                  "description": "the number of emails the subaccount has sent in the last hour"
                },
                "hourly_quota": {
                  "type": "integer",
                  "description": "the current hourly quota for the subaccount, either manual or reputation-based"
                },
                "last_30_days": {
                  "type": "object",
                  "description": "stats for this subaccount in the last 30 days",
                  "properties": {
                    "sent": {
                      "type": "integer",
                      "description": "the number of emails sent for this subaccount in the last 30 days"
                    },
                    "hard_bounces": {
                      "type": "integer",
                      "description": "the number of emails hard bounced for this subaccount in the last 30 days"
                    },
                    "soft_bounces": {
                      "type": "integer",
                      "description": "the number of emails soft bounced for this subaccount in the last 30 days"
                    },
                    "rejects": {
                      "type": "integer",
                      "description": "the number of emails rejected for sending this subaccount in the last 30 days"
                    },
                    "complaints": {
                      "type": "integer",
                      "description": "the number of spam complaints for this subaccount in the last 30 days"
                    },
                    "unsubs": {
                      "type": "integer",
                      "description": "the number of unsbuscribes for this subaccount in the last 30 days"
                    },
                    "opens": {
                      "type": "integer",
                      "description": "the number of times emails have been opened for this subaccount in the last 30 days"
                    },
                    "unique_opens": {
                      "type": "integer",
                      "description": "the number of unique opens for emails sent for this subaccount in the last 30 days"
                    },
                    "clicks": {
                      "type": "integer",
                      "description": "the number of URLs that have been clicked for this subaccount in the last 30 days"
                    },
                    "unique_clicks": {
                      "type": "integer",
                      "description": "the number of unique clicks for emails sent for this subaccount in the last 30 days"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/subaccounts/update": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "update",
          "methodNameSnake": "update"
        },
        "summary": "Update subaccount",
        "description": "Update an existing subaccount.",
        "operationId": "postSubaccountsUpdate",
        "tags": ["subaccounts"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "id"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "id": {
                  "type": "string",
                  "description": "the unique identifier of the subaccount to update"
                },
                "name": {
                  "type": "string",
                  "description": "an optional display name to further identify the subaccount",
                  "maxLength": 1024
                },
                "notes": {
                  "type": "string",
                  "description": "optional extra text to associate with the subaccount"
                },
                "custom_quota": {
                  "type": "integer",
                  "description": "an optional manual hourly quota for the subaccount. If not specified, Mandrill will manage this based on reputation",
                  "minimum": 0
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the information for the updated subaccount",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "a unique indentifier for the subaccount"
                },
                "name": {
                  "type": "string",
                  "description": "an optional display name for the subaccount"
                },
                "custom_quota": {
                  "type": "integer",
                  "description": "an optional manual hourly quota for the subaccount. If not specified, the hourly quota will be managed based on reputation"
                },
                "status": {
                  "type": "string",
                  "description": "the current sending status of the subaccount",
                  "enum": ["active", "paused"]
                },
                "reputation": {
                  "type": "integer",
                  "description": "the subaccount's current reputation on a scale from 0 to 100",
                  "minimum": 0,
                  "maximum": 100
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the subaccount was created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "first_sent_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the subaccount first sent as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "sent_weekly": {
                  "type": "integer",
                  "description": "the number of emails the subaccount has sent so far this week (weeks start on midnight Monday, UTC)"
                },
                "sent_monthly": {
                  "type": "integer",
                  "description": "the number of emails the subaccount has sent so far this month (months start on midnight of the 1st, UTC)"
                },
                "sent_total": {
                  "type": "integer",
                  "description": "the number of emails the subaccount has sent since it was created"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/subaccounts/delete": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "delete",
          "methodNameSnake": "delete"
        },
        "summary": "Delete subaccount",
        "description": "Delete an existing subaccount. Any email related to the subaccount will be saved, but stats will be removed and any future sending calls to this subaccount will fail.",
        "operationId": "postSubaccountsDelete",
        "tags": ["subaccounts"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "id"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "id": {
                  "type": "string",
                  "description": "the unique identifier of the subaccount to delete"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the information for the deleted subaccount",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "a unique indentifier for the subaccount"
                },
                "name": {
                  "type": "string",
                  "description": "an optional display name for the subaccount"
                },
                "custom_quota": {
                  "type": "integer",
                  "description": "an optional manual hourly quota for the subaccount. If not specified, the hourly quota will be managed based on reputation"
                },
                "status": {
                  "type": "string",
                  "description": "the current sending status of the subaccount",
                  "enum": ["active", "paused"]
                },
                "reputation": {
                  "type": "integer",
                  "description": "the subaccount's current reputation on a scale from 0 to 100",
                  "minimum": 0,
                  "maximum": 100
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the subaccount was created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "first_sent_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the subaccount first sent as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "sent_weekly": {
                  "type": "integer",
                  "description": "the number of emails the subaccount has sent so far this week (weeks start on midnight Monday, UTC)"
                },
                "sent_monthly": {
                  "type": "integer",
                  "description": "the number of emails the subaccount has sent so far this month (months start on midnight of the 1st, UTC)"
                },
                "sent_total": {
                  "type": "integer",
                  "description": "the number of emails the subaccount has sent since it was created"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/subaccounts/pause": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "pause",
          "methodNameSnake": "pause"
        },
        "summary": "Pause subaccount",
        "description": "Pause a subaccount's sending. Any future emails delivered to this subaccount will be queued for a maximum of 3 days until the subaccount is resumed.",
        "operationId": "postSubaccountsPause",
        "tags": ["subaccounts"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "id"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "id": {
                  "type": "string",
                  "description": "the unique identifier of the subaccount to pause"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the information for the paused subaccount",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "a unique indentifier for the subaccount"
                },
                "name": {
                  "type": "string",
                  "description": "an optional display name for the subaccount"
                },
                "custom_quota": {
                  "type": "integer",
                  "description": "an optional manual hourly quota for the subaccount. If not specified, the hourly quota will be managed based on reputation"
                },
                "status": {
                  "type": "string",
                  "description": "the current sending status of the subaccount",
                  "enum": ["active", "paused"]
                },
                "reputation": {
                  "type": "integer",
                  "description": "the subaccount's current reputation on a scale from 0 to 100",
                  "minimum": 0,
                  "maximum": 100
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the subaccount was created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "first_sent_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the subaccount first sent as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "sent_weekly": {
                  "type": "integer",
                  "description": "the number of emails the subaccount has sent so far this week (weeks start on midnight Monday, UTC)"
                },
                "sent_monthly": {
                  "type": "integer",
                  "description": "the number of emails the subaccount has sent so far this month (months start on midnight of the 1st, UTC)"
                },
                "sent_total": {
                  "type": "integer",
                  "description": "the number of emails the subaccount has sent since it was created"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/subaccounts/resume": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "resume",
          "methodNameSnake": "resume"
        },
        "summary": "Resume subaccount",
        "description": "Resume a paused subaccount's sending.",
        "operationId": "postSubaccountsResume",
        "tags": ["subaccounts"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "id"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "id": {
                  "type": "string",
                  "description": "the unique identifier of the subaccount to resume"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the information for the resumed subaccount",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "a unique indentifier for the subaccount"
                },
                "name": {
                  "type": "string",
                  "description": "an optional display name for the subaccount"
                },
                "custom_quota": {
                  "type": "integer",
                  "description": "an optional manual hourly quota for the subaccount. If not specified, the hourly quota will be managed based on reputation"
                },
                "status": {
                  "type": "string",
                  "description": "the current sending status of the subaccount",
                  "enum": ["active", "paused"]
                },
                "reputation": {
                  "type": "integer",
                  "description": "the subaccount's current reputation on a scale from 0 to 100",
                  "minimum": 0,
                  "maximum": 100
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the subaccount was created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "first_sent_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the subaccount first sent as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "sent_weekly": {
                  "type": "integer",
                  "description": "the number of emails the subaccount has sent so far this week (weeks start on midnight Monday, UTC)"
                },
                "sent_monthly": {
                  "type": "integer",
                  "description": "the number of emails the subaccount has sent so far this month (months start on midnight of the 1st, UTC)"
                },
                "sent_total": {
                  "type": "integer",
                  "description": "the number of emails the subaccount has sent since it was created"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/tags/list": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "list",
          "methodNameSnake": "list"
        },
        "summary": "List tags",
        "description": "Return all of the user-defined tag information.",
        "operationId": "postTagsList",
        "tags": ["tags"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "a list of user-defined tags",
              "items": {
                "type": "object",
                "description": "a user-defined tag",
                "properties": {
                  "tag": {
                    "type": "string",
                    "description": "the actual tag as a string"
                  },
                  "reputation": {
                    "type": "integer",
                    "description": "the tag's current reputation on a scale from 0 to 100.",
                    "minimum": 0,
                    "maximum": 100
                  },
                  "sent": {
                    "type": "integer",
                    "description": "the total number of messages sent with this tag"
                  },
                  "hard_bounces": {
                    "type": "integer",
                    "description": "the total number of hard bounces by messages with this tag"
                  },
                  "soft_bounces": {
                    "type": "integer",
                    "description": "the total number of soft bounces by messages with this tag"
                  },
                  "rejects": {
                    "type": "integer",
                    "description": "the total number of rejected messages with this tag"
                  },
                  "complaints": {
                    "type": "integer",
                    "description": "the total number of spam complaints received for messages with this tag"
                  },
                  "unsubs": {
                    "type": "integer",
                    "description": "the total number of unsubscribe requests received for messages with this tag"
                  },
                  "opens": {
                    "type": "integer",
                    "description": "the total number of times messages with this tag have been opened"
                  },
                  "clicks": {
                    "type": "integer",
                    "description": "the total number of times tracked URLs in messages with this tag have been clicked"
                  },
                  "unique_opens": {
                    "type": "integer",
                    "description": "the number of unique opens for emails sent with this tag"
                  },
                  "unique_clicks": {
                    "type": "integer",
                    "description": "the number of unique clicks for emails sent with this tag"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/tags/delete": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "delete",
          "methodNameSnake": "delete"
        },
        "summary": "Delete tag",
        "description": "Deletes a tag permanently. Deleting a tag removes the tag from any messages that have been sent, and also deletes the tag's stats. There is no way to undo this operation, so use it carefully.",
        "operationId": "postTagsDelete",
        "tags": ["tags"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "tag"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "tag": {
                  "type": "string",
                  "description": "a tag name"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the tag that was deleted",
              "properties": {
                "tag": {
                  "type": "string",
                  "description": "the actual tag as a string"
                },
                "reputation": {
                  "type": "integer",
                  "description": "the tag's current reputation on a scale from 0 to 100.",
                  "minimum": 0,
                  "maximum": 100
                },
                "sent": {
                  "type": "integer",
                  "description": "the total number of messages sent with this tag"
                },
                "hard_bounces": {
                  "type": "integer",
                  "description": "the total number of hard bounces by messages with this tag"
                },
                "soft_bounces": {
                  "type": "integer",
                  "description": "the total number of soft bounces by messages with this tag"
                },
                "rejects": {
                  "type": "integer",
                  "description": "the total number of rejected messages with this tag"
                },
                "complaints": {
                  "type": "integer",
                  "description": "the total number of spam complaints received for messages with this tag"
                },
                "unsubs": {
                  "type": "integer",
                  "description": "the total number of unsubscribe requests received for messages with this tag"
                },
                "opens": {
                  "type": "integer",
                  "description": "the total number of times messages with this tag have been opened"
                },
                "clicks": {
                  "type": "integer",
                  "description": "the total number of times tracked URLs in messages with this tag have been clicked"
                },
                "unique_opens": {
                  "type": "integer",
                  "description": "the number of unique opens for emails sent with this tag"
                },
                "unique_clicks": {
                  "type": "integer",
                  "description": "the number of unique clicks for emails sent with this tag"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/tags/info": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "info",
          "methodNameSnake": "info"
        },
        "summary": "Get tag info",
        "description": "Return more detailed information about a single tag, including aggregates of recent stats.",
        "operationId": "postTagsInfo",
        "tags": ["tags"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "tag"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "tag": {
                  "type": "string",
                  "description": "an existing tag name"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the detailed information on the tag",
              "properties": {
                "tag": {
                  "type": "string",
                  "description": "the actual tag as a string"
                },
                "sent": {
                  "type": "integer",
                  "description": "the total number of messages sent with this tag"
                },
                "hard_bounces": {
                  "type": "integer",
                  "description": "the total number of hard bounces by messages with this tag"
                },
                "soft_bounces": {
                  "type": "integer",
                  "description": "the total number of soft bounces by messages with this tag"
                },
                "rejects": {
                  "type": "integer",
                  "description": "the total number of rejected messages with this tag"
                },
                "complaints": {
                  "type": "integer",
                  "description": "the total number of spam complaints received for messages with this tag"
                },
                "unsubs": {
                  "type": "integer",
                  "description": "the total number of unsubscribe requests received for messages with this tag"
                },
                "opens": {
                  "type": "integer",
                  "description": "the total number of times messages with this tag have been opened"
                },
                "clicks": {
                  "type": "integer",
                  "description": "the total number of times tracked URLs in messages with this tag have been clicked"
                },
                "stats": {
                  "type": "object",
                  "description": "an aggregate summary of the tag's sending stats",
                  "properties": {
                    "today": {
                      "type": "object",
                      "description": "stats with this tag so far today",
                      "properties": {
                        "sent": {
                          "type": "integer",
                          "description": "the number of emails sent with this tag so far today"
                        },
                        "hard_bounces": {
                          "type": "integer",
                          "description": "the number of emails hard bounced with this tag so far today"
                        },
                        "soft_bounces": {
                          "type": "integer",
                          "description": "the number of emails soft bounced with this tag so far today"
                        },
                        "rejects": {
                          "type": "integer",
                          "description": "the number of emails rejected for sending this sender so far today"
                        },
                        "complaints": {
                          "type": "integer",
                          "description": "the number of spam complaints with this tag so far today"
                        },
                        "unsubs": {
                          "type": "integer",
                          "description": "the number of unsubscribes with this tag so far today"
                        },
                        "opens": {
                          "type": "integer",
                          "description": "the number of times emails have been opened with this tag so far today"
                        },
                        "unique_opens": {
                          "type": "integer",
                          "description": "the number of unique opens for emails sent with this tag so far today"
                        },
                        "clicks": {
                          "type": "integer",
                          "description": "the number of URLs that have been clicked with this tag so far today"
                        },
                        "unique_clicks": {
                          "type": "integer",
                          "description": "the number of unique clicks for emails sent with this tag so far today"
                        }
                      }
                    },
                    "last_7_days": {
                      "type": "object",
                      "description": "stats with this tag in the last 7 days",
                      "properties": {
                        "sent": {
                          "type": "integer",
                          "description": "the number of emails sent with this tag in the last 7 days"
                        },
                        "hard_bounces": {
                          "type": "integer",
                          "description": "the number of emails hard bounced with this tag in the last 7 days"
                        },
                        "soft_bounces": {
                          "type": "integer",
                          "description": "the number of emails soft bounced with this tag in the last 7 days"
                        },
                        "rejects": {
                          "type": "integer",
                          "description": "the number of emails rejected for sending this sender in the last 7 days"
                        },
                        "complaints": {
                          "type": "integer",
                          "description": "the number of spam complaints with this tag in the last 7 days"
                        },
                        "unsubs": {
                          "type": "integer",
                          "description": "the number of unsubscribes with this tag in the last 7 days"
                        },
                        "opens": {
                          "type": "integer",
                          "description": "the number of times emails have been opened with this tag in the last 7 days"
                        },
                        "unique_opens": {
                          "type": "integer",
                          "description": "the number of unique opens for emails sent with this tag in the last 7 days"
                        },
                        "clicks": {
                          "type": "integer",
                          "description": "the number of URLs that have been clicked with this tag in the last 7 days"
                        },
                        "unique_clicks": {
                          "type": "integer",
                          "description": "the number of unique clicks for emails sent with this tag in the last 7 days"
                        }
                      }
                    },
                    "last_30_days": {
                      "type": "object",
                      "description": "stats with this tag in the last 30 days",
                      "properties": {
                        "sent": {
                          "type": "integer",
                          "description": "the number of emails sent with this tag in the last 30 days"
                        },
                        "hard_bounces": {
                          "type": "integer",
                          "description": "the number of emails hard bounced with this tag in the last 30 days"
                        },
                        "soft_bounces": {
                          "type": "integer",
                          "description": "the number of emails soft bounced with this tag in the last 30 days"
                        },
                        "rejects": {
                          "type": "integer",
                          "description": "the number of emails rejected for sending this sender in the last 30 days"
                        },
                        "complaints": {
                          "type": "integer",
                          "description": "the number of spam complaints with this tag in the last 30 days"
                        },
                        "unsubs": {
                          "type": "integer",
                          "description": "the number of unsubscribes with this tag in the last 30 days"
                        },
                        "opens": {
                          "type": "integer",
                          "description": "the number of times emails have been opened with this tag in the last 30 days"
                        },
                        "unique_opens": {
                          "type": "integer",
                          "description": "the number of unique opens for emails sent with this tag in the last 30 days"
                        },
                        "clicks": {
                          "type": "integer",
                          "description": "the number of URLs that have been clicked with this tag in the last 30 days"
                        },
                        "unique_clicks": {
                          "type": "integer",
                          "description": "the number of unique clicks for emails sent with this tag in the last 30 days"
                        }
                      }
                    },
                    "last_60_days": {
                      "type": "object",
                      "description": "stats with this tag in the last 60 days",
                      "properties": {
                        "sent": {
                          "type": "integer",
                          "description": "the number of emails sent with this tag in the last 60 days"
                        },
                        "hard_bounces": {
                          "type": "integer",
                          "description": "the number of emails hard bounced with this tag in the last 60 days"
                        },
                        "soft_bounces": {
                          "type": "integer",
                          "description": "the number of emails soft bounced with this tag in the last 60 days"
                        },
                        "rejects": {
                          "type": "integer",
                          "description": "the number of emails rejected for sending this sender in the last 60 days"
                        },
                        "complaints": {
                          "type": "integer",
                          "description": "the number of spam complaints with this tag in the last 60 days"
                        },
                        "unsubs": {
                          "type": "integer",
                          "description": "the number of unsubscribes with this tag in the last 60 days"
                        },
                        "opens": {
                          "type": "integer",
                          "description": "the number of times emails have been opened with this tag in the last 60 days"
                        },
                        "unique_opens": {
                          "type": "integer",
                          "description": "the number of unique opens for emails sent with this tag in the last 60 days"
                        },
                        "clicks": {
                          "type": "integer",
                          "description": "the number of URLs that have been clicked with this tag in the last 60 days"
                        },
                        "unique_clicks": {
                          "type": "integer",
                          "description": "the number of unique clicks for emails sent with this tag in the last 60 days"
                        }
                      }
                    },
                    "last_90_days": {
                      "type": "object",
                      "description": "stats with this tag in the last 90 days",
                      "properties": {
                        "sent": {
                          "type": "integer",
                          "description": "the number of emails sent with this tag in the last 90 days"
                        },
                        "hard_bounces": {
                          "type": "integer",
                          "description": "the number of emails hard bounced with this tag in the last 90 days"
                        },
                        "soft_bounces": {
                          "type": "integer",
                          "description": "the number of emails soft bounced with this tag in the last 90 days"
                        },
                        "rejects": {
                          "type": "integer",
                          "description": "the number of emails rejected for sending this sender in the last 90 days"
                        },
                        "complaints": {
                          "type": "integer",
                          "description": "the number of spam complaints with this tag in the last 90 days"
                        },
                        "unsubs": {
                          "type": "integer",
                          "description": "the number of unsubscribes with this tag in the last 90 days"
                        },
                        "opens": {
                          "type": "integer",
                          "description": "the number of times emails have been opened with this tag in the last 90 days"
                        },
                        "unique_opens": {
                          "type": "integer",
                          "description": "the number of unique opens for emails sent with this tag in the last 90 days"
                        },
                        "clicks": {
                          "type": "integer",
                          "description": "the number of URLs that have been clicked with this tag in the last 90 days"
                        },
                        "unique_clicks": {
                          "type": "integer",
                          "description": "the number of unique clicks for emails sent with this tag in the last 90 days"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/tags/time-series": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "timeSeries",
          "methodNameSnake": "time_series"
        },
        "summary": "View tag history",
        "description": "Return the recent history (hourly stats for the last 30 days) for a tag.",
        "operationId": "postTagsTimeSeries",
        "tags": ["tags"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "tag"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "tag": {
                  "type": "string",
                  "description": "an existing tag name"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "the array of history information",
              "items": {
                "type": "object",
                "description": "the stats for a single hour",
                "properties": {
                  "time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the hour as a UTC date string in YYYY-MM-DD HH:MM:SS format"
                  },
                  "sent": {
                    "type": "integer",
                    "description": "the number of emails that were sent during the hour"
                  },
                  "hard_bounces": {
                    "type": "integer",
                    "description": "the number of emails that hard bounced during the hour"
                  },
                  "soft_bounces": {
                    "type": "integer",
                    "description": "the number of emails that soft bounced during the hour"
                  },
                  "rejects": {
                    "type": "integer",
                    "description": "the number of emails that were rejected during the hour"
                  },
                  "complaints": {
                    "type": "integer",
                    "description": "the number of spam complaints received during the hour"
                  },
                  "unsubs": {
                    "type": "integer",
                    "description": "the number of unsubscribes received during the hour"
                  },
                  "opens": {
                    "type": "integer",
                    "description": "the number of emails opened during the hour"
                  },
                  "unique_opens": {
                    "type": "integer",
                    "description": "the number of unique opens generated by messages sent during the hour"
                  },
                  "clicks": {
                    "type": "integer",
                    "description": "the number of tracked URLs clicked during the hour"
                  },
                  "unique_clicks": {
                    "type": "integer",
                    "description": "the number of unique clicks generated by messages sent during the hour"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/tags/all-time-series": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "allTimeSeries",
          "methodNameSnake": "all_time_series"
        },
        "summary": "View all tags history",
        "description": "Return the recent history (hourly stats for the last 30 days) for all tags.",
        "operationId": "postTagsAllTimeSeries",
        "tags": ["tags"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "the array of history information",
              "items": {
                "type": "object",
                "description": "the stats for a single hour",
                "properties": {
                  "time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the hour as a UTC date string in YYYY-MM-DD HH:MM:SS format"
                  },
                  "sent": {
                    "type": "integer",
                    "description": "the number of emails that were sent during the hour"
                  },
                  "hard_bounces": {
                    "type": "integer",
                    "description": "the number of emails that hard bounced during the hour"
                  },
                  "soft_bounces": {
                    "type": "integer",
                    "description": "the number of emails that soft bounced during the hour"
                  },
                  "rejects": {
                    "type": "integer",
                    "description": "the number of emails that were rejected during the hour"
                  },
                  "complaints": {
                    "type": "integer",
                    "description": "the number of spam complaints received during the hour"
                  },
                  "unsubs": {
                    "type": "integer",
                    "description": "the number of unsubscribes received during the hour"
                  },
                  "opens": {
                    "type": "integer",
                    "description": "the number of emails opened during the hour"
                  },
                  "unique_opens": {
                    "type": "integer",
                    "description": "the number of unique opens generated by messages sent during the hour"
                  },
                  "clicks": {
                    "type": "integer",
                    "description": "the number of tracked URLs clicked during the hour"
                  },
                  "unique_clicks": {
                    "type": "integer",
                    "description": "the number of unique clicks generated by messages sent during the hour"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/templates/add": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "add",
          "methodNameSnake": "add"
        },
        "summary": "Add template",
        "description": "Add a new template.",
        "operationId": "postTemplatesAdd",
        "tags": ["templates"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "name"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "name": {
                  "type": "string",
                  "description": "the name for the new template - must be unique"
                },
                "from_email": {
                  "type": "string",
                  "description": "a default sending address for emails sent using this template",
                  "format": "email"
                },
                "from_name": {
                  "type": "string",
                  "description": "a default from name to be used"
                },
                "subject": {
                  "type": "string",
                  "description": "a default subject line to be used"
                },
                "code": {
                  "type": "string",
                  "description": "the HTML code for the template with mc:edit attributes for the editable elements"
                },
                "text": {
                  "type": "string",
                  "description": "a default text part to be used when sending with this template"
                },
                "publish": {
                  "type": "boolean",
                  "description": "set to false to add a draft template without publishing"
                },
                "labels": {
                  "type": "array",
                  "description": "an optional array of up to 10 labels to use for filtering templates",
                  "maxLength": 10,
                  "items": {
                    "type": "string",
                    "description": "a single label",
                    "maxLength": 100
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the information saved about the new template",
              "properties": {
                "slug": {
                  "type": "string",
                  "description": "the immutable unique code name of the template"
                },
                "name": {
                  "type": "string",
                  "description": "the name of the template"
                },
                "labels": {
                  "type": "array",
                  "description": "the list of labels applied to the template",
                  "items": {
                    "type": "string",
                    "description": "a single label"
                  }
                },
                "code": {
                  "type": "string",
                  "description": "the full HTML code of the template, with mc:edit attributes marking the editable elements - draft version"
                },
                "subject": {
                  "type": "string",
                  "description": "the subject line of the template, if provided - draft version"
                },
                "from_email": {
                  "type": "string",
                  "description": "the default sender address for the template, if provided - draft version"
                },
                "from_name": {
                  "type": "string",
                  "description": "the default sender from name for the template, if provided - draft version"
                },
                "text": {
                  "type": "string",
                  "description": "the default text part of messages sent with the template, if provided - draft version"
                },
                "publish_name": {
                  "type": "string",
                  "description": "the same as the template name - kept as a separate field for backwards compatibility"
                },
                "publish_code": {
                  "type": "string",
                  "description": "the full HTML code of the template, with mc:edit attributes marking the editable elements that are available as published, if it has been published"
                },
                "publish_subject": {
                  "type": "string",
                  "description": "the subject line of the template, if provided"
                },
                "publish_from_email": {
                  "type": "string",
                  "format": "email",
                  "description": "the default sender address for the template, if provided"
                },
                "publish_from_name": {
                  "type": "string",
                  "description": "the default sender from name for the template, if provided"
                },
                "publish_text": {
                  "type": "string",
                  "description": "the default text part of messages sent with the template, if provided"
                },
                "published_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time the template was last published as a UTC string in YYYY-MM-DD HH:MM:SS format, or null if it has not been published"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time the template was first created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time the template was last modified as a UTC string in YYYY-MM-DD HH:MM:SS format"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/templates/info": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "info",
          "methodNameSnake": "info"
        },
        "summary": "Get template info",
        "description": "Get the information for an existing template.",
        "operationId": "postTemplatesInfo",
        "tags": ["templates"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "name"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "name": {
                  "type": "string",
                  "description": "the immutable name of an existing template"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the requested template information",
              "properties": {
                "slug": {
                  "type": "string",
                  "description": "the immutable unique code name of the template"
                },
                "name": {
                  "type": "string",
                  "description": "the name of the template"
                },
                "labels": {
                  "type": "array",
                  "description": "the list of labels applied to the template",
                  "items": {
                    "type": "string",
                    "description": "a single label"
                  }
                },
                "code": {
                  "type": "string",
                  "description": "the full HTML code of the template, with mc:edit attributes marking the editable elements - draft version"
                },
                "subject": {
                  "type": "string",
                  "description": "the subject line of the template, if provided - draft version"
                },
                "from_email": {
                  "type": "string",
                  "description": "the default sender address for the template, if provided - draft version"
                },
                "from_name": {
                  "type": "string",
                  "description": "the default sender from name for the template, if provided - draft version"
                },
                "text": {
                  "type": "string",
                  "description": "the default text part of messages sent with the template, if provided - draft version"
                },
                "publish_name": {
                  "type": "string",
                  "description": "the same as the template name - kept as a separate field for backwards compatibility"
                },
                "publish_code": {
                  "type": "string",
                  "description": "the full HTML code of the template, with mc:edit attributes marking the editable elements that are available as published, if it has been published"
                },
                "publish_subject": {
                  "type": "string",
                  "description": "the subject line of the template, if provided"
                },
                "publish_from_email": {
                  "type": "string",
                  "format": "email",
                  "description": "the default sender address for the template, if provided"
                },
                "publish_from_name": {
                  "type": "string",
                  "description": "the default sender from name for the template, if provided"
                },
                "publish_text": {
                  "type": "string",
                  "description": "the default text part of messages sent with the template, if provided"
                },
                "published_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time the template was last published as a UTC string in YYYY-MM-DD HH:MM:SS format, or null if it has not been published"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time the template was first created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time the template was last modified as a UTC string in YYYY-MM-DD HH:MM:SS format"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/templates/update": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "update",
          "methodNameSnake": "update"
        },
        "summary": "Update template",
        "description": "Update the code for an existing template. If null is provided for any fields, the values will remain unchanged.",
        "operationId": "postTemplatesUpdate",
        "tags": ["templates"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "name"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "name": {
                  "type": "string",
                  "description": "the immutable name of an existing template"
                },
                "from_email": {
                  "type": "string",
                  "description": "the new default sending address",
                  "format": "email"
                },
                "from_name": {
                  "type": "string",
                  "description": "the new default from name"
                },
                "subject": {
                  "type": "string",
                  "description": "the new default subject line"
                },
                "code": {
                  "type": "string",
                  "description": "the new code for the template"
                },
                "text": {
                  "type": "string",
                  "description": "the new default text part to be used"
                },
                "publish": {
                  "type": "boolean",
                  "description": "set to false to update the draft version of the template without publishing"
                },
                "labels": {
                  "type": "array",
                  "description": "an optional array of up to 10 labels to use for filtering templates",
                  "maxLength": 10,
                  "items": {
                    "type": "string",
                    "description": "a single label",
                    "maxLength": 100
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the template that was updated",
              "properties": {
                "slug": {
                  "type": "string",
                  "description": "the immutable unique code name of the template"
                },
                "name": {
                  "type": "string",
                  "description": "the name of the template"
                },
                "labels": {
                  "type": "array",
                  "description": "the list of labels applied to the template",
                  "items": {
                    "type": "string",
                    "description": "a single label"
                  }
                },
                "code": {
                  "type": "string",
                  "description": "the full HTML code of the template, with mc:edit attributes marking the editable elements - draft version"
                },
                "subject": {
                  "type": "string",
                  "description": "the subject line of the template, if provided - draft version"
                },
                "from_email": {
                  "type": "string",
                  "description": "the default sender address for the template, if provided - draft version"
                },
                "from_name": {
                  "type": "string",
                  "description": "the default sender from name for the template, if provided - draft version"
                },
                "text": {
                  "type": "string",
                  "description": "the default text part of messages sent with the template, if provided - draft version"
                },
                "publish_name": {
                  "type": "string",
                  "description": "the same as the template name - kept as a separate field for backwards compatibility"
                },
                "publish_code": {
                  "type": "string",
                  "description": "the full HTML code of the template, with mc:edit attributes marking the editable elements that are available as published, if it has been published"
                },
                "publish_subject": {
                  "type": "string",
                  "description": "the subject line of the template, if provided"
                },
                "publish_from_email": {
                  "type": "string",
                  "format": "email",
                  "description": "the default sender address for the template, if provided"
                },
                "publish_from_name": {
                  "type": "string",
                  "description": "the default sender from name for the template, if provided"
                },
                "publish_text": {
                  "type": "string",
                  "description": "the default text part of messages sent with the template, if provided"
                },
                "published_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time the template was last published as a UTC string in YYYY-MM-DD HH:MM:SS format, or null if it has not been published"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time the template was first created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time the template was last modified as a UTC string in YYYY-MM-DD HH:MM:SS format"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/templates/publish": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "publish",
          "methodNameSnake": "publish"
        },
        "summary": "Publish template content",
        "description": "Publish the content for the template. Any new messages sent using this template will start using the content that was previously in draft.",
        "operationId": "postTemplatesPublish",
        "tags": ["templates"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "name"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "name": {
                  "type": "string",
                  "description": "the immutable name of an existing template"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the template that was published",
              "properties": {
                "slug": {
                  "type": "string",
                  "description": "the immutable unique code name of the template"
                },
                "name": {
                  "type": "string",
                  "description": "the name of the template"
                },
                "labels": {
                  "type": "array",
                  "description": "the list of labels applied to the template",
                  "items": {
                    "type": "string",
                    "description": "a single label"
                  }
                },
                "code": {
                  "type": "string",
                  "description": "the full HTML code of the template, with mc:edit attributes marking the editable elements - draft version"
                },
                "subject": {
                  "type": "string",
                  "description": "the subject line of the template, if provided - draft version"
                },
                "from_email": {
                  "type": "string",
                  "description": "the default sender address for the template, if provided - draft version"
                },
                "from_name": {
                  "type": "string",
                  "description": "the default sender from name for the template, if provided - draft version"
                },
                "text": {
                  "type": "string",
                  "description": "the default text part of messages sent with the template, if provided - draft version"
                },
                "publish_name": {
                  "type": "string",
                  "description": "the same as the template name - kept as a separate field for backwards compatibility"
                },
                "publish_code": {
                  "type": "string",
                  "description": "the full HTML code of the template, with mc:edit attributes marking the editable elements that are available as published, if it has been published"
                },
                "publish_subject": {
                  "type": "string",
                  "description": "the subject line of the template, if provided"
                },
                "publish_from_email": {
                  "type": "string",
                  "format": "email",
                  "description": "the default sender address for the template, if provided"
                },
                "publish_from_name": {
                  "type": "string",
                  "description": "the default sender from name for the template, if provided"
                },
                "publish_text": {
                  "type": "string",
                  "description": "the default text part of messages sent with the template, if provided"
                },
                "published_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time the template was last published as a UTC string in YYYY-MM-DD HH:MM:SS format, or null if it has not been published"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time the template was first created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time the template was last modified as a UTC string in YYYY-MM-DD HH:MM:SS format"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/templates/delete": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "delete",
          "methodNameSnake": "delete"
        },
        "summary": "Delete template",
        "description": "Delete a template.",
        "operationId": "postTemplatesDelete",
        "tags": ["templates"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "name"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "name": {
                  "type": "string",
                  "description": "the immutable name of an existing template"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the template that was deleted",
              "properties": {
                "slug": {
                  "type": "string",
                  "description": "the immutable unique code name of the template"
                },
                "name": {
                  "type": "string",
                  "description": "the name of the template"
                },
                "labels": {
                  "type": "array",
                  "description": "the list of labels applied to the template",
                  "items": {
                    "type": "string",
                    "description": "a single label"
                  }
                },
                "code": {
                  "type": "string",
                  "description": "the full HTML code of the template, with mc:edit attributes marking the editable elements - draft version"
                },
                "subject": {
                  "type": "string",
                  "description": "the subject line of the template, if provided - draft version"
                },
                "from_email": {
                  "type": "string",
                  "description": "the default sender address for the template, if provided - draft version"
                },
                "from_name": {
                  "type": "string",
                  "description": "the default sender from name for the template, if provided - draft version"
                },
                "text": {
                  "type": "string",
                  "description": "the default text part of messages sent with the template, if provided - draft version"
                },
                "publish_name": {
                  "type": "string",
                  "description": "the same as the template name - kept as a separate field for backwards compatibility"
                },
                "publish_code": {
                  "type": "string",
                  "description": "the full HTML code of the template, with mc:edit attributes marking the editable elements that are available as published, if it has been published"
                },
                "publish_subject": {
                  "type": "string",
                  "description": "the subject line of the template, if provided"
                },
                "publish_from_email": {
                  "type": "string",
                  "format": "email",
                  "description": "the default sender address for the template, if provided"
                },
                "publish_from_name": {
                  "type": "string",
                  "description": "the default sender from name for the template, if provided"
                },
                "publish_text": {
                  "type": "string",
                  "description": "the default text part of messages sent with the template, if provided"
                },
                "published_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time the template was last published as a UTC string in YYYY-MM-DD HH:MM:SS format, or null if it has not been published"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time the template was first created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time the template was last modified as a UTC string in YYYY-MM-DD HH:MM:SS format"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/templates/list": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "list",
          "methodNameSnake": "list"
        },
        "summary": "List templates",
        "description": "Return a list of all the templates available to this user.",
        "operationId": "postTemplatesList",
        "tags": ["templates"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "label": {
                  "type": "string",
                  "description": "an optional label to filter the templates"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "an array of structs with information about each template",
              "items": {
                "type": "object",
                "description": "the information on each template in the account",
                "properties": {
                  "slug": {
                    "type": "string",
                    "description": "the immutable unique code name of the template"
                  },
                  "name": {
                    "type": "string",
                    "description": "the name of the template"
                  },
                  "labels": {
                    "type": "array",
                    "description": "the list of labels applied to the template",
                    "items": {
                      "type": "string",
                      "description": "a single label"
                    }
                  },
                  "code": {
                    "type": "string",
                    "description": "the full HTML code of the template, with mc:edit attributes marking the editable elements - draft version"
                  },
                  "subject": {
                    "type": "string",
                    "description": "the subject line of the template, if provided - draft version"
                  },
                  "from_email": {
                    "type": "string",
                    "description": "the default sender address for the template, if provided - draft version"
                  },
                  "from_name": {
                    "type": "string",
                    "description": "the default sender from name for the template, if provided - draft version"
                  },
                  "text": {
                    "type": "string",
                    "description": "the default text part of messages sent with the template, if provided - draft version"
                  },
                  "publish_name": {
                    "type": "string",
                    "description": "the same as the template name - kept as a separate field for backwards compatibility"
                  },
                  "publish_code": {
                    "type": "string",
                    "description": "the full HTML code of the template, with mc:edit attributes marking the editable elements that are available as published, if it has been published"
                  },
                  "publish_subject": {
                    "type": "string",
                    "description": "the subject line of the template, if provided"
                  },
                  "publish_from_email": {
                    "type": "string",
                    "format": "email",
                    "description": "the default sender address for the template, if provided"
                  },
                  "publish_from_name": {
                    "type": "string",
                    "description": "the default sender from name for the template, if provided"
                  },
                  "publish_text": {
                    "type": "string",
                    "description": "the default text part of messages sent with the template, if provided"
                  },
                  "published_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the date and time the template was last published as a UTC string in YYYY-MM-DD HH:MM:SS format, or null if it has not been published"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the date and time the template was first created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the date and time the template was last modified as a UTC string in YYYY-MM-DD HH:MM:SS format"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/templates/time-series": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "timeSeries",
          "methodNameSnake": "time_series"
        },
        "summary": "Get template history",
        "description": "Return the recent history (hourly stats for the last 30 days) for a template.",
        "operationId": "postTemplatesTimeSeries",
        "tags": ["templates"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "name"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "name": {
                  "type": "string",
                  "description": "the name of an existing template"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "the array of history information",
              "items": {
                "type": "object",
                "description": "the stats for a single hour",
                "properties": {
                  "time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the hour as a UTC date string in YYYY-MM-DD HH:MM:SS format"
                  },
                  "sent": {
                    "type": "integer",
                    "description": "the number of emails that were sent during the hour"
                  },
                  "hard_bounces": {
                    "type": "integer",
                    "description": "the number of emails that hard bounced during the hour"
                  },
                  "soft_bounces": {
                    "type": "integer",
                    "description": "the number of emails that soft bounced during the hour"
                  },
                  "rejects": {
                    "type": "integer",
                    "description": "the number of emails that were rejected during the hour"
                  },
                  "complaints": {
                    "type": "integer",
                    "description": "the number of spam complaints received during the hour"
                  },
                  "opens": {
                    "type": "integer",
                    "description": "the number of emails opened during the hour"
                  },
                  "unique_opens": {
                    "type": "integer",
                    "description": "the number of unique opens generated by messages sent during the hour"
                  },
                  "clicks": {
                    "type": "integer",
                    "description": "the number of tracked URLs clicked during the hour"
                  },
                  "unique_clicks": {
                    "type": "integer",
                    "description": "the number of unique clicks generated by messages sent during the hour"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/templates/render": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "render",
          "methodNameSnake": "render"
        },
        "summary": "Render html template",
        "description": "Inject content and optionally merge fields into a template, returning the HTML that results.",
        "operationId": "postTemplatesRender",
        "tags": ["templates"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "template_name", "template_content"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "template_name": {
                  "type": "string",
                  "description": "the immutable name of a template that exists in the user's account"
                },
                "template_content": {
                  "type": "array",
                  "description": "an array of template content to render. Each item in the array should be a struct with two keys - name: the name of the content block to set the content for, and content: the actual content to put into the block",
                  "items": {
                    "type": "object",
                    "description": "the injection of a single piece of content into a single editable region",
                    "required": ["name", "content"],
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "the name of the mc:edit editable region to inject into"
                      },
                      "content": {
                        "type": "string",
                        "description": "the content to inject"
                      }
                    }
                  }
                },
                "merge_vars": {
                  "type": "array",
                  "description": "optional merge variables to use for injecting merge field content. If this is not provided, no merge fields will be replaced.",
                  "items": {
                    "type": "object",
                    "description": "a single merge variable",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "the merge variable's name. Merge variable names are case-insensitive and may not start with _"
                      },
                      "content": {
                        "type": "string",
                        "description": "the merge variable's content"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the result of rendering the given template with the content and merge field values injected",
              "properties": {
                "html": {
                  "type": "string",
                  "description": "the rendered HTML as a string"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/urls/list": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "list",
          "methodNameSnake": "list"
        },
        "summary": "List most clicked urls",
        "description": "Get the 100 most clicked URLs.",
        "operationId": "postUrlsList",
        "tags": ["urls"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "the 100 most clicked URLs and their stats",
              "items": {
                "type": "object",
                "description": "the individual URL stats",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "the URL to be tracked"
                  },
                  "sent": {
                    "type": "integer",
                    "description": "the number of emails that contained the URL"
                  },
                  "clicks": {
                    "type": "integer",
                    "description": "the number of times the URL has been clicked from a tracked email"
                  },
                  "unique_clicks": {
                    "type": "integer",
                    "description": "the number of unique emails that have generated clicks for this URL"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/urls/search": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "search",
          "methodNameSnake": "search"
        },
        "summary": "Search most clicked urls",
        "description": "Return the 100 most clicked URLs that match the search query given.",
        "operationId": "postUrlsSearchDeprecated",
        "tags": ["urls"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "q"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "q": {
                  "type": "string",
                  "description": "a search query"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "the 100 most clicked URLs matching the search query",
              "items": {
                "type": "object",
                "description": "the URL matching the query",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "the URL to be tracked"
                  },
                  "sent": {
                    "type": "integer",
                    "description": "the number of emails that contained the URL"
                  },
                  "clicks": {
                    "type": "integer",
                    "description": "the number of times the URL has been clicked from a tracked email"
                  },
                  "unique_clicks": {
                    "type": "integer",
                    "description": "the number of unique emails that have generated clicks for this URL"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/urls/time-series": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "timeSeries",
          "methodNameSnake": "time_series"
        },
        "summary": "Get url history",
        "description": "Return the recent history (hourly stats for the last 30 days) for a URL",
        "operationId": "postUrlsTimeSeries",
        "tags": ["urls"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "url"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "url": {
                  "type": "string",
                  "description": "an existing URL"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "the array of history information",
              "items": {
                "type": "object",
                "description": "the information for a single hour",
                "properties": {
                  "time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the hour as a UTC date string in YYYY-MM-DD HH:MM:SS format"
                  },
                  "sent": {
                    "type": "integer",
                    "description": "the number of emails that were sent with the URL during the hour"
                  },
                  "clicks": {
                    "type": "integer",
                    "description": "the number of times the URL was clicked during the hour"
                  },
                  "unique_clicks": {
                    "type": "integer",
                    "description": "the number of unique clicks generated for emails sent with this URL during the hour"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/urls/tracking-domains": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "trackingDomains",
          "methodNameSnake": "tracking_domains"
        },
        "summary": "List tracking domains",
        "description": "Get the list of tracking domains set up for this account.",
        "operationId": "postUrlsTrackingDomains",
        "tags": ["urls"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "the tracking domains and their status",
              "items": {
                "type": "object",
                "description": "the individual tracking domain",
                "properties": {
                  "domain": {
                    "type": "string",
                    "description": "the tracking domain name"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the date and time that the tracking domain was added as a UTC string in YYYY-MM-DD HH:MM:SS format"
                  },
                  "last_tested_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "when the domain's DNS settings were last tested as a UTC string in YYYY-MM-DD HH:MM:SS format"
                  },
                  "cname": {
                    "type": "object",
                    "description": "details about the domain's CNAME record",
                    "properties": {
                      "valid": {
                        "type": "boolean",
                        "description": "whether the domain's CNAME record is valid for use with Mandrill"
                      },
                      "valid_after": {
                        "type": "string",
                        "description": "when the domain's CNAME record will be considered valid for use with Mandrill as a UTC string in YYYY-MM-DD HH:MM:SS format. If set, this indicates that the record is valid now, but was previously invalid, and Mandrill will wait until the record's TTL elapses to start using it."
                      },
                      "error": {
                        "type": "string",
                        "description": "an error describing the CNAME record, or null if the record is correct"
                      }
                    }
                  },
                  "valid_tracking": {
                    "type": "boolean",
                    "description": "whether this domain can be used as a tracking domain for email."
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/urls/add-tracking-domain": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "addTrackingDomain",
          "methodNameSnake": "add_tracking_domain"
        },
        "summary": "Add tracking domains",
        "description": "Add a tracking domain to your account.",
        "operationId": "postUrlsAddTrackingDomain",
        "tags": ["urls"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "domain"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "domain": {
                  "type": "string",
                  "description": "a domain name"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "information about the tracking domain",
              "properties": {
                "domain": {
                  "type": "string",
                  "description": "the tracking domain name"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the tracking domain was added as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "last_tested_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "when the domain's DNS settings were last tested as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "cname": {
                  "type": "object",
                  "description": "details about the domain's CNAME record",
                  "properties": {
                    "valid": {
                      "type": "boolean",
                      "description": "whether the domain's CNAME record is valid for use with Mandrill"
                    },
                    "valid_after": {
                      "type": "string",
                      "description": "when the domain's CNAME record will be considered valid for use with Mandrill as a UTC string in YYYY-MM-DD HH:MM:SS format. If set, this indicates that the record is valid now, but was previously invalid, and Mandrill will wait until the record's TTL elapses to start using it."
                    },
                    "error": {
                      "type": "string",
                      "description": "an error describing the CNAME record, or null if the record is correct"
                    }
                  }
                },
                "valid_tracking": {
                  "type": "boolean",
                  "description": "whether this domain can be used as a tracking domain for email."
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/urls/check-tracking-domain": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "checkTrackingDomain",
          "methodNameSnake": "check_tracking_domain"
        },
        "summary": "Check cname settings",
        "description": "Checks the CNAME settings for a tracking domain. The domain must have been added already with the add-tracking-domain call.",
        "operationId": "postUrlsCheckTrackingDomain",
        "tags": ["urls"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "domain"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "domain": {
                  "type": "string",
                  "description": "an existing tracking domain name"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "information about the tracking domain",
              "properties": {
                "domain": {
                  "type": "string",
                  "description": "the tracking domain name"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the tracking domain was added as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "last_tested_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "when the domain's DNS settings were last tested as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "cname": {
                  "type": "object",
                  "description": "details about the domain's CNAME record",
                  "properties": {
                    "valid": {
                      "type": "boolean",
                      "description": "whether the domain's CNAME record is valid for use with Mandrill"
                    },
                    "valid_after": {
                      "type": "string",
                      "description": "when the domain's CNAME record will be considered valid for use with Mandrill as a UTC string in YYYY-MM-DD HH:MM:SS format. If set, this indicates that the record is valid now, but was previously invalid, and Mandrill will wait until the record's TTL elapses to start using it."
                    },
                    "error": {
                      "type": "string",
                      "description": "an error describing the CNAME record, or null if the record is correct"
                    }
                  }
                },
                "valid_tracking": {
                  "type": "boolean",
                  "description": "whether this domain can be used as a tracking domain for email."
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/users/info": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "info",
          "methodNameSnake": "info"
        },
        "summary": "Get user info",
        "description": "Return the information about the API-connected user.",
        "operationId": "postUsersInfo",
        "tags": ["users"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the user information including username, key, reputation, quota, and historical sending stats",
              "properties": {
                "username": {
                  "type": "string",
                  "description": "the username of the user (used for SMTP authentication)"
                },
                "created_at": {
                  "type": "string",
                  "description": "the date and time that the user's Mandrill account was created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "public_id": {
                  "type": "string",
                  "description": "a unique, permanent identifier for this user"
                },
                "reputation": {
                  "type": "integer",
                  "description": "the reputation of the user on a scale from 0 to 100, with 75 generally being a \"good\" reputation"
                },
                "hourly_quota": {
                  "type": "integer",
                  "description": "the maximum number of emails Mandrill will deliver for this user each hour. Any emails beyond that will be accepted and queued for later delivery. Users with higher reputations will have higher hourly quotas"
                },
                "backlog": {
                  "type": "integer",
                  "description": "the number of emails that are queued for delivery due to exceeding your monthly or hourly quotas"
                },
                "stats": {
                  "type": "object",
                  "description": "an aggregate summary of the account's sending stats",
                  "properties": {
                    "today": {
                      "type": "object",
                      "description": "stats for this user so far today",
                      "properties": {
                        "sent": {
                          "type": "integer",
                          "description": "the number of emails sent for this user so far today"
                        },
                        "hard_bounces": {
                          "type": "integer",
                          "description": "the number of emails hard bounced for this user so far today"
                        },
                        "soft_bounces": {
                          "type": "integer",
                          "description": "the number of emails soft bounced for this user so far today"
                        },
                        "rejects": {
                          "type": "integer",
                          "description": "the number of emails rejected for sending this sender so far today"
                        },
                        "complaints": {
                          "type": "integer",
                          "description": "the number of spam complaints for this user so far today"
                        },
                        "unsubs": {
                          "type": "integer",
                          "description": "the number of unsubscribes for this user so far today"
                        },
                        "opens": {
                          "type": "integer",
                          "description": "the number of times emails have been opened for this user so far today"
                        },
                        "unique_opens": {
                          "type": "integer",
                          "description": "the number of unique opens for emails sent for this user so far today"
                        },
                        "clicks": {
                          "type": "integer",
                          "description": "the number of URLs that have been clicked for this user so far today"
                        },
                        "unique_clicks": {
                          "type": "integer",
                          "description": "the number of unique clicks for emails sent for this user so far today"
                        }
                      }
                    },
                    "last_7_days": {
                      "type": "object",
                      "description": "stats for this user in the last 7 days",
                      "properties": {
                        "sent": {
                          "type": "integer",
                          "description": "the number of emails sent for this user in the last 7 days"
                        },
                        "hard_bounces": {
                          "type": "integer",
                          "description": "the number of emails hard bounced for this user in the last 7 days"
                        },
                        "soft_bounces": {
                          "type": "integer",
                          "description": "the number of emails soft bounced for this user in the last 7 days"
                        },
                        "rejects": {
                          "type": "integer",
                          "description": "the number of emails rejected for sending this sender in the last 7 days"
                        },
                        "complaints": {
                          "type": "integer",
                          "description": "the number of spam complaints for this user in the last 7 days"
                        },
                        "unsubs": {
                          "type": "integer",
                          "description": "the number of unsubscribes for this user in the last 7 days"
                        },
                        "opens": {
                          "type": "integer",
                          "description": "the number of times emails have been opened for this user in the last 7 days"
                        },
                        "unique_opens": {
                          "type": "integer",
                          "description": "the number of unique opens for emails sent for this user in the last 7 days"
                        },
                        "clicks": {
                          "type": "integer",
                          "description": "the number of URLs that have been clicked for this user in the last 7 days"
                        },
                        "unique_clicks": {
                          "type": "integer",
                          "description": "the number of unique clicks for emails sent for this user in the last 7 days"
                        }
                      }
                    },
                    "last_30_days": {
                      "type": "object",
                      "description": "stats for this user in the last 30 days",
                      "properties": {
                        "sent": {
                          "type": "integer",
                          "description": "the number of emails sent for this user in the last 30 days"
                        },
                        "hard_bounces": {
                          "type": "integer",
                          "description": "the number of emails hard bounced for this user in the last 30 days"
                        },
                        "soft_bounces": {
                          "type": "integer",
                          "description": "the number of emails soft bounced for this user in the last 30 days"
                        },
                        "rejects": {
                          "type": "integer",
                          "description": "the number of emails rejected for sending this sender in the last 30 days"
                        },
                        "complaints": {
                          "type": "integer",
                          "description": "the number of spam complaints for this user in the last 30 days"
                        },
                        "unsubs": {
                          "type": "integer",
                          "description": "the number of unsubscribes for this user in the last 30 days"
                        },
                        "opens": {
                          "type": "integer",
                          "description": "the number of times emails have been opened for this user in the last 30 days"
                        },
                        "unique_opens": {
                          "type": "integer",
                          "description": "the number of unique opens for emails sent for this user in the last 30 days"
                        },
                        "clicks": {
                          "type": "integer",
                          "description": "the number of URLs that have been clicked for this user in the last 30 days"
                        },
                        "unique_clicks": {
                          "type": "integer",
                          "description": "the number of unique clicks for emails sent for this user in the last 30 days"
                        }
                      }
                    },
                    "last_60_days": {
                      "type": "object",
                      "description": "stats for this user in the last 60 days",
                      "properties": {
                        "sent": {
                          "type": "integer",
                          "description": "the number of emails sent for this user in the last 60 days"
                        },
                        "hard_bounces": {
                          "type": "integer",
                          "description": "the number of emails hard bounced for this user in the last 60 days"
                        },
                        "soft_bounces": {
                          "type": "integer",
                          "description": "the number of emails soft bounced for this user in the last 60 days"
                        },
                        "rejects": {
                          "type": "integer",
                          "description": "the number of emails rejected for sending this sender in the last 60 days"
                        },
                        "complaints": {
                          "type": "integer",
                          "description": "the number of spam complaints for this user in the last 60 days"
                        },
                        "unsubs": {
                          "type": "integer",
                          "description": "the number of unsubscribes for this user in the last 60 days"
                        },
                        "opens": {
                          "type": "integer",
                          "description": "the number of times emails have been opened for this user in the last 60 days"
                        },
                        "unique_opens": {
                          "type": "integer",
                          "description": "the number of unique opens for emails sent for this user in the last 60 days"
                        },
                        "clicks": {
                          "type": "integer",
                          "description": "the number of URLs that have been clicked for this user in the last 60 days"
                        },
                        "unique_clicks": {
                          "type": "integer",
                          "description": "the number of unique clicks for emails sent for this user in the last 60 days"
                        }
                      }
                    },
                    "last_90_days": {
                      "type": "object",
                      "description": "stats for this user in the last 90 days",
                      "properties": {
                        "sent": {
                          "type": "integer",
                          "description": "the number of emails sent for this user in the last 90 days"
                        },
                        "hard_bounces": {
                          "type": "integer",
                          "description": "the number of emails hard bounced for this user in the last 90 days"
                        },
                        "soft_bounces": {
                          "type": "integer",
                          "description": "the number of emails soft bounced for this user in the last 90 days"
                        },
                        "rejects": {
                          "type": "integer",
                          "description": "the number of emails rejected for sending this sender in the last 90 days"
                        },
                        "complaints": {
                          "type": "integer",
                          "description": "the number of spam complaints for this user in the last 90 days"
                        },
                        "unsubs": {
                          "type": "integer",
                          "description": "the number of unsubscribes for this user in the last 90 days"
                        },
                        "opens": {
                          "type": "integer",
                          "description": "the number of times emails have been opened for this user in the last 90 days"
                        },
                        "unique_opens": {
                          "type": "integer",
                          "description": "the number of unique opens for emails sent for this user in the last 90 days"
                        },
                        "clicks": {
                          "type": "integer",
                          "description": "the number of URLs that have been clicked for this user in the last 90 days"
                        },
                        "unique_clicks": {
                          "type": "integer",
                          "description": "the number of unique clicks for emails sent for this user in the last 90 days"
                        }
                      }
                    },
                    "all_time": {
                      "type": "object",
                      "description": "tats for the lifetime of the user's account",
                      "properties": {
                        "sent": {
                          "type": "integer",
                          "description": "the number of emails sent in the lifetime of the user's account"
                        },
                        "hard_bounces": {
                          "type": "integer",
                          "description": "the number of emails hard bounced in the lifetime of the user's account"
                        },
                        "soft_bounces": {
                          "type": "integer",
                          "description": "the number of emails soft bounced in the lifetime of the user's account"
                        },
                        "rejects": {
                          "type": "integer",
                          "description": "the number of emails rejected for sending this user so far today"
                        },
                        "complaints": {
                          "type": "integer",
                          "description": "the number of spam complaints in the lifetime of the user's account"
                        },
                        "unsubs": {
                          "type": "integer",
                          "description": "the number of unsubscribes in the lifetime of the user's account"
                        },
                        "opens": {
                          "type": "integer",
                          "description": "the number of times emails have been opened in the lifetime of the user's account"
                        },
                        "unique_opens": {
                          "type": "integer",
                          "description": "the number of unique opens for emails sent in the lifetime of the user's account"
                        },
                        "clicks": {
                          "type": "integer",
                          "description": "the number of URLs that have been clicked in the lifetime of the user's account"
                        },
                        "unique_clicks": {
                          "type": "integer",
                          "description": "the number of unique clicks for emails sent in the lifetime of the user's account"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/users/ping": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "ping",
          "methodNameSnake": "ping"
        },
        "summary": "Ping",
        "description": "Validate an API key and respond to a ping.",
        "operationId": "postUsersPing",
        "tags": ["users"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string",
              "description": "the string \"PONG!\"",
              "example": "PONG!"
            }
          }
        },
        "deprecated": false
      }
    },
    "/users/ping2": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "ping2",
          "methodNameSnake": "ping2"
        },
        "summary": "Ping 2",
        "description": "Validate an API key and respond to a ping (JSON parser version).",
        "operationId": "postUsersPing2",
        "tags": ["users"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "a struct with one key \"PING\" with a static value \"PONG!\"",
              "properties": {
                "PING": {
                  "type": "string",
                  "description": "a simple pong response",
                  "example": "PONG!"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/users/senders": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "senders",
          "methodNameSnake": "senders"
        },
        "summary": "List account senders",
        "description": "Return the senders that have tried to use this account, both verified and unverified.",
        "operationId": "postUsersSenders",
        "tags": ["users"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "an array of sender data, one for each sending addresses used by the account",
              "items": {
                "type": "object",
                "description": "the information on each sending address in the account",
                "properties": {
                  "address": {
                    "type": "string",
                    "format": "email",
                    "description": "the sender's email address"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the date and time that the sender was first seen by Mandrill as a UTC date string in YYYY-MM-DD HH:MM:SS format"
                  },
                  "sent": {
                    "type": "integer",
                    "description": "the total number of messages sent by this sender"
                  },
                  "hard_bounces": {
                    "type": "integer",
                    "description": "the total number of hard bounces by messages by this sender"
                  },
                  "soft_bounces": {
                    "type": "integer",
                    "description": "the total number of soft bounces by messages by this sender"
                  },
                  "rejects": {
                    "type": "integer",
                    "description": "the total number of rejected messages by this sender"
                  },
                  "complaints": {
                    "type": "integer",
                    "description": "the total number of spam complaints received for messages by this sender"
                  },
                  "unsubs": {
                    "type": "integer",
                    "description": "the total number of unsubscribe requests received for messages by this sender"
                  },
                  "opens": {
                    "type": "integer",
                    "description": "the total number of times messages by this sender have been opened"
                  },
                  "clicks": {
                    "type": "integer",
                    "description": "the total number of times tracked URLs in messages by this sender have been clicked"
                  },
                  "unique_opens": {
                    "type": "integer",
                    "description": "the number of unique opens for emails sent for this sender"
                  },
                  "unique_clicks": {
                    "type": "integer",
                    "description": "the number of unique clicks for emails sent for this sender"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/webhooks/list": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "list",
          "methodNameSnake": "list"
        },
        "summary": "List webhooks",
        "description": "Get the list of all webhooks defined on the account.",
        "operationId": "postWebhooksList",
        "tags": ["webhooks"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "the webhooks associated with the account",
              "items": {
                "type": "object",
                "description": "the individual webhook info",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "a unique integer indentifier for the webhook"
                  },
                  "url": {
                    "type": "string",
                    "description": "The URL that the event data will be posted to"
                  },
                  "description": {
                    "type": "string",
                    "description": "a description of the webhook"
                  },
                  "auth_key": {
                    "type": "string",
                    "description": "the key used to requests for this webhook"
                  },
                  "events": {
                    "type": "array",
                    "description": "The message events that will be posted to the hook",
                    "items": {
                      "type": "string",
                      "description": "the individual message event",
                      "enum": [
                        "send",
                        "hard_bounce",
                        "soft_bounce",
                        "open",
                        "click",
                        "spam",
                        "unsub",
                        "reject"
                      ]
                    }
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the date and time that the webhook was created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                  },
                  "last_sent_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the date and time that the webhook last successfully received events as a UTC string in YYYY-MM-DD HH:MM:SS format"
                  },
                  "batches_sent": {
                    "type": "integer",
                    "description": "the number of event batches that have ever been sent to this webhook"
                  },
                  "events_sent": {
                    "type": "integer",
                    "description": "the total number of events that have ever been sent to this webhook"
                  },
                  "last_error": {
                    "type": "string",
                    "description": "if we've ever gotten an error trying to post to this webhook, the last error that we've seen"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/webhooks/add": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "add",
          "methodNameSnake": "add"
        },
        "summary": "Add webhook",
        "description": "Add a new webhook.",
        "operationId": "postWebhooksAdd",
        "tags": ["webhooks"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "url"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "url": {
                  "type": "string",
                  "description": "the URL to POST batches of events"
                },
                "description": {
                  "type": "string",
                  "description": "an optional description of the webhook"
                },
                "events": {
                  "type": "array",
                  "description": "an optional list of events that will be posted to the webhook",
                  "items": {
                    "type": "string",
                    "description": "the individual event to listen for",
                    "enum": [
                      "send",
                      "hard_bounce",
                      "soft_bounce",
                      "open",
                      "click",
                      "spam",
                      "unsub",
                      "reject",
                      "blacklist",
                      "whitelist"
                    ]
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the information saved about the new webhook",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "a unique integer indentifier for the webhook"
                },
                "url": {
                  "type": "string",
                  "description": "The URL that the event data will be posted to"
                },
                "description": {
                  "type": "string",
                  "description": "a description of the webhook"
                },
                "auth_key": {
                  "type": "string",
                  "description": "the key used to requests for this webhook"
                },
                "events": {
                  "type": "array",
                  "description": "The message events that will be posted to the hook",
                  "items": {
                    "type": "string",
                    "description": "the individual message event",
                    "enum": [
                      "send",
                      "hard_bounce",
                      "soft_bounce",
                      "open",
                      "click",
                      "spam",
                      "unsub",
                      "reject"
                    ]
                  }
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the webhook was created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "last_sent_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the webhook last successfully received events as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "batches_sent": {
                  "type": "integer",
                  "description": "the number of event batches that have ever been sent to this webhook"
                },
                "events_sent": {
                  "type": "integer",
                  "description": "the total number of events that have ever been sent to this webhook"
                },
                "last_error": {
                  "type": "string",
                  "description": "if we've ever gotten an error trying to post to this webhook, the last error that we've seen"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/webhooks/info": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "info",
          "methodNameSnake": "info"
        },
        "summary": "Get webhook info",
        "description": "Given the ID of an existing webhook, return the data about it.",
        "operationId": "postWebhooksInfo",
        "tags": ["webhooks"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "id"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "id": {
                  "type": "integer",
                  "description": "the unique identifier of a webhook belonging to this account"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the information about the webhook",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "a unique integer indentifier for the webhook"
                },
                "url": {
                  "type": "string",
                  "description": "The URL that the event data will be posted to"
                },
                "description": {
                  "type": "string",
                  "description": "a description of the webhook"
                },
                "auth_key": {
                  "type": "string",
                  "description": "the key used to requests for this webhook"
                },
                "events": {
                  "type": "array",
                  "description": "The message events that will be posted to the hook",
                  "items": {
                    "type": "string",
                    "description": "the individual message event",
                    "enum": [
                      "send",
                      "hard_bounce",
                      "soft_bounce",
                      "open",
                      "click",
                      "spam",
                      "unsub",
                      "reject"
                    ]
                  }
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the webhook was created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "last_sent_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the webhook last successfully received events as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "batches_sent": {
                  "type": "integer",
                  "description": "the number of event batches that have ever been sent to this webhook"
                },
                "events_sent": {
                  "type": "integer",
                  "description": "the total number of events that have ever been sent to this webhook"
                },
                "last_error": {
                  "type": "string",
                  "description": "if we've ever gotten an error trying to post to this webhook, the last error that we've seen"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/webhooks/update": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "update",
          "methodNameSnake": "update"
        },
        "summary": "Update webhook",
        "description": "Update an existing webhook.",
        "operationId": "postWebhooksUpdate",
        "tags": ["webhooks"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "id", "url"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "id": {
                  "type": "number",
                  "description": "the unique identifier of a webhook belonging to this account"
                },
                "url": {
                  "type": "string",
                  "description": "the URL to POST batches of events. Requires webhook to exist."
                },
                "description": {
                  "type": "string",
                  "description": "an optional description of the webhook"
                },
                "events": {
                  "type": "array",
                  "description": "an optional list of events that will be posted to the webhook",
                  "items": {
                    "type": "string",
                    "description": "the individual event to listen for",
                    "enum": [
                      "send",
                      "hard_bounce",
                      "soft_bounce",
                      "open",
                      "click",
                      "spam",
                      "unsub",
                      "reject",
                      "blacklist",
                      "whitelist"
                    ]
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the information for the updated webhook",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "a unique integer indentifier for the webhook"
                },
                "url": {
                  "type": "string",
                  "description": "The URL that the event data will be posted to"
                },
                "description": {
                  "type": "string",
                  "description": "a description of the webhook"
                },
                "auth_key": {
                  "type": "string",
                  "description": "the key used to requests for this webhook"
                },
                "events": {
                  "type": "array",
                  "description": "The message events that will be posted to the hook",
                  "items": {
                    "type": "string",
                    "description": "the individual message event",
                    "enum": [
                      "send",
                      "hard_bounce",
                      "soft_bounce",
                      "open",
                      "click",
                      "spam",
                      "unsub",
                      "reject"
                    ]
                  }
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the webhook was created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "last_sent_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the webhook last successfully received events as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "batches_sent": {
                  "type": "integer",
                  "description": "the number of event batches that have ever been sent to this webhook"
                },
                "events_sent": {
                  "type": "integer",
                  "description": "the total number of events that have ever been sent to this webhook"
                },
                "last_error": {
                  "type": "string",
                  "description": "if we've ever gotten an error trying to post to this webhook, the last error that we've seen"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/webhooks/delete": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "delete",
          "methodNameSnake": "delete"
        },
        "summary": "Delete webhook",
        "description": "Delete an existing webhook.",
        "operationId": "postWebhooksDelete",
        "tags": ["webhooks"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "id"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "id": {
                  "type": "integer",
                  "description": "the unique identifier of a webhook belonging to this account"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "the information for the deleted webhook",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "a unique integer indentifier for the webhook"
                },
                "url": {
                  "type": "string",
                  "description": "The URL that the event data will be posted to"
                },
                "description": {
                  "type": "string",
                  "description": "a description of the webhook"
                },
                "auth_key": {
                  "type": "string",
                  "description": "the key used to requests for this webhook"
                },
                "events": {
                  "type": "array",
                  "description": "The message events that will be posted to the hook",
                  "items": {
                    "type": "string",
                    "description": "the individual message event",
                    "enum": [
                      "send",
                      "hard_bounce",
                      "soft_bounce",
                      "open",
                      "click",
                      "spam",
                      "unsub",
                      "reject"
                    ]
                  }
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the webhook was created as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "last_sent_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "the date and time that the webhook last successfully received events as a UTC string in YYYY-MM-DD HH:MM:SS format"
                },
                "batches_sent": {
                  "type": "integer",
                  "description": "the number of event batches that have ever been sent to this webhook"
                },
                "events_sent": {
                  "type": "integer",
                  "description": "the total number of events that have ever been sent to this webhook"
                },
                "last_error": {
                  "type": "string",
                  "description": "if we've ever gotten an error trying to post to this webhook, the last error that we've seen"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/whitelists/add": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "add",
          "methodNameSnake": "add"
        },
        "summary": "Add email to allowlist",
        "description": "Adds an email to your email rejection allowlist. If the address is currently on your denylist, that denylist entry will be removed automatically.",
        "operationId": "postWhitelistsAdd",
        "tags": ["whitelists"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "email"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "email": {
                  "type": "string",
                  "description": "an email address to add to the allowlist",
                  "format": "email"
                },
                "comment": {
                  "type": "string",
                  "description": "an optional description of why the email was added to the allowlist",
                  "maxLength": 255
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "a status object containing the address and the result of the operation",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "the email address you provided"
                },
                "added": {
                  "type": "boolean",
                  "description": "whether the operation succeeded"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/whitelists/list": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "list",
          "methodNameSnake": "list"
        },
        "summary": "List allowlisted emails",
        "description": "Retrieves your email rejection allowlist. You can provide an email address or search prefix to limit the results. Returns up to 1000 results.",
        "operationId": "postWhitelistsList",
        "tags": ["whitelists"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "email": {
                  "type": "string",
                  "description": "an optional email address or prefix to search by",
                  "format": "email"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "description": "up to 1000 allowlist entries",
              "items": {
                "type": "object",
                "description": "the information for each allowlist entry",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "the email that is allowlisted"
                  },
                  "detail": {
                    "type": "string",
                    "description": "a description of why the email was allowlisted"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "when the email was added to the allowlist"
                  }
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/whitelists/delete": {
      "post": {
        "x-custom-config": {
          "methodNameCamel": "delete",
          "methodNameSnake": "delete"
        },
        "summary": "Remove email from allowlist",
        "description": "Removes an email address from the allowlist.",
        "operationId": "postWhitelistsDelete",
        "tags": ["whitelists"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["key", "email"],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "a valid api key"
                },
                "email": {
                  "type": "string",
                  "description": "the email address to remove from the allowlist",
                  "format": "email"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "description": "a status object containing the address and whether the deletion succeeded",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "the email address that was removed from the denylist"
                },
                "deleted": {
                  "type": "boolean",
                  "description": "whether the address was deleted successfully"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {}
}
